<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="CSSEMEA5" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.2.3.17. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers"/>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">sertec360-uat.emea.intra.acer.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">http://sertec360-uat.emea.intra.acer.com/DE/</stringProp>
            <stringProp name="Authorization.username">Jayapal.R@acer.com</stringProp>
            <stringProp name="Authorization.password">AqZ$8pj!@97</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">D:\JmeterBlazeScripts\CSV\SNCSV.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">SNumber</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">DE/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">1293</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/html</stringProp>
              </elementProp>
              <elementProp name="Date" elementType="Header">
                <stringProp name="Header.name">Date</stringProp>
                <stringProp name="Header.value">Thu, 04 Jun 2020 08:28:33 GMT</stringProp>
              </elementProp>
              <elementProp name="RVBD-CSH" elementType="Header">
                <stringProp name="Header.name">RVBD-CSH</stringProp>
                <stringProp name="Header.value">10.36.15.237</stringProp>
              </elementProp>
              <elementProp name="RVBD-SSH" elementType="Header">
                <stringProp name="Header.name">RVBD-SSH</stringProp>
                <stringProp name="Header.value">10.60.201.10</stringProp>
              </elementProp>
              <elementProp name="Server" elementType="Header">
                <stringProp name="Header.name">Server</stringProp>
                <stringProp name="Header.value">Microsoft-IIS/7.5</stringProp>
              </elementProp>
              <elementProp name="WWW-Authenticate" elementType="Header">
                <stringProp name="Header.name">WWW-Authenticate</stringProp>
                <stringProp name="Header.value">NTLM</stringProp>
              </elementProp>
              <elementProp name="X-RBT-Optimized-By" elementType="Header">
                <stringProp name="Header.name">X-RBT-Optimized-By</stringProp>
                <stringProp name="Header.value">twtpeva2 (RiOS 9.2.0) GR</stringProp>
              </elementProp>
              <elementProp name="X-UA-Compatible" elementType="Header">
                <stringProp name="Header.name">X-UA-Compatible</stringProp>
                <stringProp name="Header.value">IE=EDGE</stringProp>
              </elementProp>
              <elementProp name="Autorization" elementType="Header">
                <stringProp name="Header.name">Autorization</stringProp>
                <stringProp name="Header.value">Basic SmF5YXBhbC5SQGFjZXIuY29tOkFxWiQ4cGohQDk3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">0</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/AcerMainForm.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/AcerMainForm.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">24494</stringProp>
            </ConstantTimer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SessionID</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;h2&gt;Object moved to &lt;a href=&quot;/DE/(.*?)/AcerMainForm.aspx&quot;&gt;here&lt;/a&gt;.&lt;/h2&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">SessionIDNotFound</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/LoginPage.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">33BCE92A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value">061a7WhhaFF2LuM6xc1rptQ7CMrmSRZVCCjMdUbUQDV47L6gtamog5neofarmKusepOEkQ/wovKgCr4CkpUY4T/0HbB5NJQ7GZpiWG3MZ9PuOQpq/eVBhasg/A5oRBbTUm8YFkY7GRO/q3iWZ0UG8PA/V4cFzCRrwmljSFESxezKWcdXDiBaHmHDO2Ikt9QMG1QWkW2DbXHu70YG54O/sTn2/l9YXLSC+kAXnXcLpQeaTMjwj6ZWBZzFjSw7fJh93dqcMydndznpTLDiuRuHRlakD0hzoeYTvRNZQ9Km/TtUX0d8NzNU78gNHd4M6WObwHQejZkqb0uDGxS1SUlK69ylHNH8iKBeRcsLm+XZIBbfGnDmtO5qPGMoFznoW1loUK7eU1aRJTHBtWerQ3KaqYqfhP9CHuxPBTEYlZfgZ+QIPQRVUlbgAPvMWVIagCifC2oiVkzFH629/PGNtePFZGCBLLyPS6BKynMPCN8WStLH20V9ZTd7CPl9JcwzZbJu8OijHmL38lrCalFkiqGMdKfkErbSvWiNf7kvaLzqbVnbbhz1SZw375T3myiO+kqlmDpGVuKgJSF+o5LxADQOR462d1ML341fFpg/6ue//owR3em18oZZ0QYKJdVQhxpvllLxNX7UhLsGlIlUf9U7QEalTrDKaHvmx07WfdkwWn8y1qqgRHLCOxMqrY22peqpAcsT32RFO7qH0HW+qAnT/tWLMouMbvLGLhvO7T+bwYqY0lfvxL/vP09aKohFzmqrejOcJmUDvfmtCvwmijf4BRKzXrhhupIQ3P9SzF0oqd8Bgy+jD1VI4qH1v4SqZZPwR517WB5+4GLP2jmRSuspsxOzgG8j1vjlAvOg24ZoiCGTQRtElsSJMkWFqQY6JoMsAg4EzQ4YyoQ987J5SO2lAjI1X5eqB/ztJzlhm8Jy7kP74U63M0pWbrJTMCU2jpBSbUbHW9eH9aU6+e3vLGHCZg0T1oypp3k6QuZI9hQM30EK4RPD1CoIJXD3Q7s2pI9HyXGqmtwXw3zozIxkKiQ3GWgh57jASB2hTLNW9dMe+NyNFM93XSKY6pjpG8YZdy/Q</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="OtherUserNameTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">OtherUserNameTextBox</stringProp>
                  <stringProp name="Argument.value">mkumaran</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="UserLanguagePreferenceDDL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">UserLanguagePreferenceDDL</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__LASTFOCUS" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__LASTFOCUS</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="OtherUserLanguagePreferenceDDL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">OtherUserLanguagePreferenceDDL</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SupportedBrowsersHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SupportedBrowsersHidden</stringProp>
                  <stringProp name="Argument.value">chrome:30,mozilla:30</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value">OtherUserLoginImageButton</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AuthModeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AuthModeHidden</stringProp>
                  <stringProp name="Argument.value">Form</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="OtherUserPasswordTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">OtherUserPasswordTextBox</stringProp>
                  <stringProp name="Argument.value">mkumaran</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/LoginPage.aspx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://sertec360-uat.emea.intra.acer.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">30626</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Pages/SR_DASHBOARD/Dashboard.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Pages/SR_DASHBOARD/Dashboard.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://sertec360-uat.emea.intra.acer.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">402</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/AcerMainForm.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/AcerMainForm.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1506</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://sertec360-uat.emea.intra.acer.com/CSSNotification/Notification/ACGCSS/Get/P1005Z" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">CSSNotification/Notification/ACGCSS/Get/P1005Z</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://sertec360-uat.emea.intra.acer.com/CSSNotification/SignalR/negotiate?clientProtocol=1.5&amp;connectionData=%5B%7B%22name%22%3A%22notificationhub%22%7D%5D&amp;_=1591261274651" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="connectionData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">connectionData</stringProp>
                  <stringProp name="Argument.value">[{&quot;name&quot;:&quot;notificationhub&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientProtocol" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clientProtocol</stringProp>
                  <stringProp name="Argument.value">1.5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_</stringProp>
                  <stringProp name="Argument.value">1591261274651</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">CSSNotification/SignalR/negotiate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://sertec360-uat.emea.intra.acer.com/CSSNotification/signalr/connect?transport=serverSentEvents&amp;clientProtocol=1.5&amp;connectionToken=9e47lI6IKzl8mYUY6%2FE%2B%2B%2FChBE3M6t06ifV5BTm5HyHN9cIspTXY9QATQ9MKwOl%2BNB7Dmo1TLjr29HRPo%2F7GiOxavshoFYhnEd1rWrqkmi20RQencTkWY1Pk1DnpzbKc&amp;connectionData=%5B%7B%22name%22%3A%22notificationhub%22%7D%5D&amp;tid=10" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="connectionData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">connectionData</stringProp>
                  <stringProp name="Argument.value">[{&quot;name&quot;:&quot;notificationhub&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="connectionToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">connectionToken</stringProp>
                  <stringProp name="Argument.value">9e47lI6IKzl8mYUY6/E++/ChBE3M6t06ifV5BTm5HyHN9cIspTXY9QATQ9MKwOl+NB7Dmo1TLjr29HRPo/7GiOxavshoFYhnEd1rWrqkmi20RQencTkWY1Pk1DnpzbKc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="transport" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">transport</stringProp>
                  <stringProp name="Argument.value">serverSentEvents</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientProtocol" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clientProtocol</stringProp>
                  <stringProp name="Argument.value">1.5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">CSSNotification/signalr/connect</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/event-stream</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://sertec360-uat.emea.intra.acer.com/CSSNotification/SignalR/start?transport=serverSentEvents&amp;clientProtocol=1.5&amp;connectionToken=9e47lI6IKzl8mYUY6%2FE%2B%2B%2FChBE3M6t06ifV5BTm5HyHN9cIspTXY9QATQ9MKwOl%2BNB7Dmo1TLjr29HRPo%2F7GiOxavshoFYhnEd1rWrqkmi20RQencTkWY1Pk1DnpzbKc&amp;connectionData=%5B%7B%22name%22%3A%22notificationhub%22%7D%5D&amp;_=1591261274652" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="connectionData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">connectionData</stringProp>
                  <stringProp name="Argument.value">[{&quot;name&quot;:&quot;notificationhub&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="connectionToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">connectionToken</stringProp>
                  <stringProp name="Argument.value">9e47lI6IKzl8mYUY6/E++/ChBE3M6t06ifV5BTm5HyHN9cIspTXY9QATQ9MKwOl+NB7Dmo1TLjr29HRPo/7GiOxavshoFYhnEd1rWrqkmi20RQencTkWY1Pk1DnpzbKc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="transport" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">transport</stringProp>
                  <stringProp name="Argument.value">serverSentEvents</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientProtocol" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clientProtocol</stringProp>
                  <stringProp name="Argument.value">1.5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_</stringProp>
                  <stringProp name="Argument.value">1591261274652</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">CSSNotification/SignalR/start</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://sertec360-uat.emea.intra.acer.com/CSSNotification/SignalR/send?transport=serverSentEvents&amp;clientProtocol=1.5&amp;connectionToken=9e47lI6IKzl8mYUY6%2FE%2B%2B%2FChBE3M6t06ifV5BTm5HyHN9cIspTXY9QATQ9MKwOl%2BNB7Dmo1TLjr29HRPo%2F7GiOxavshoFYhnEd1rWrqkmi20RQencTkWY1Pk1DnpzbKc&amp;connectionData=%5B%7B%22name%22%3A%22notificationhub%22%7D%5D" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="connectionData" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">connectionData</stringProp>
                  <stringProp name="Argument.value">[{&quot;name&quot;:&quot;notificationhub&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="connectionToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">connectionToken</stringProp>
                  <stringProp name="Argument.value">9e47lI6IKzl8mYUY6/E++/ChBE3M6t06ifV5BTm5HyHN9cIspTXY9QATQ9MKwOl+NB7Dmo1TLjr29HRPo/7GiOxavshoFYhnEd1rWrqkmi20RQencTkWY1Pk1DnpzbKc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="transport" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">transport</stringProp>
                  <stringProp name="Argument.value">serverSentEvents</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="clientProtocol" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clientProtocol</stringProp>
                  <stringProp name="Argument.value">1.5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="data" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">data</stringProp>
                  <stringProp name="Argument.value">{&quot;H&quot;:&quot;notificationhub&quot;,&quot;M&quot;:&quot;JoinGroup&quot;,&quot;A&quot;:[&quot;ACGCSS-P1005Z&quot;],&quot;I&quot;:0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">CSSNotification/SignalR/send</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="NewCase" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/PageProxy.aspx?action=SR_CASE&amp;NewTicket=True" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                  <stringProp name="Argument.value">SR_CASE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="NewTicket" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">NewTicket</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/PageProxy.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">45586</stringProp>
            </ConstantTimer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ViewState1</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; id=&quot;__VIEWSTATE&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">ViewState1Notfound</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/PageProxy.aspx?action=SR_CASE&amp;NewTicket=True" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                  <stringProp name="Argument.value">SR_CASE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="NewTicket" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">NewTicket</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/PageProxy.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">6557</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetSNLength" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetSNLength</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetSNLength" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetSNLength</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Pages/Ajax/PATAjaxCalls.aspx?Type=CalculateWarranty&amp;IDWarranty=&amp;PurchaseDate=06/04/2020&amp;XtwIdwarranty=&amp;IDAsset=" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">CalculateWarranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PurchaseDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PurchaseDate</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDWarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDWarranty</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="XtwIdwarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">XtwIdwarranty</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDAsset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDAsset</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Pages/Ajax/PATAjaxCalls.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Pages/Ajax/PATAjaxCalls.aspx?Type=CalculateLabourandSpareWarranty&amp;IDWarranty=&amp;PurchaseDate=06/04/2020&amp;SerialNumber=&amp;XtwIdwarranty=" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">CalculateLabourandSpareWarranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SerialNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">SerialNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PurchaseDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PurchaseDate</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDWarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDWarranty</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="XtwIdwarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">XtwIdwarranty</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Pages/Ajax/PATAjaxCalls.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Pages/Ajax/AjaxCalls.aspx?Type=CheckSpareWarranty&amp;IDWarranty=&amp;PurchaseDate=06/04/2020" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">CheckSpareWarranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PurchaseDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PurchaseDate</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDWarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDWarranty</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Pages/Ajax/AjaxCalls.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Services/Ajax.asmx/GetPickupCarrier" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;IDLocation&apos;:&apos;83405F80-2D3A-4697-9A74-B4AAF5F7F6F9&apos;,&apos;isPickup&apos;:&apos;true&apos;,&apos;ShipTypeWithCarrier&apos;:&apos;true&apos; }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Services/Ajax.asmx/GetPickupCarrier</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;In Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Services/Ajax.asmx/GetDefaultPickupCarriershiptype" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;IDLocation&apos;:&apos;83405F80-2D3A-4697-9A74-B4AAF5F7F6F9&apos;,&apos;Country&apos;:&apos;&apos;,&apos;State&apos;:&apos;&apos; }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Services/Ajax.asmx/GetDefaultPickupCarriershiptype</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/SNDetails/api/Alerts/Get?serialNo=&amp;caseId=&amp;userId=P1005Z&amp;snId=&amp;productline=&amp;partnumber=[object%20Object]&amp;customerId=&amp;dbname=ACGCSS&amp;pagename=CaseCreation%20&amp;lang=EN" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="productline" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">productline</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">snId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dbname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dbname</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="caseId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">caseId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="customerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">customerId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lang" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lang</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">userId</stringProp>
                  <stringProp name="Argument.value">P1005Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="partnumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">partnumber</stringProp>
                  <stringProp name="Argument.value">[object Object]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serialNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">serialNo</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pagename" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pagename</stringProp>
                  <stringProp name="Argument.value">CaseCreation </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">SNDetails/api/Alerts/Get</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SNSearch" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/PageProxy.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="SR_CASE:CaseModeHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CaseModeHiddenField</stringProp>
                  <stringProp name="Argument.value">Simple</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToSNTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToSNTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerPOBOXDataHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerPOBOXDataHidden</stringProp>
                  <stringProp name="Argument.value">POB,APO,FPO,POST OFFICE BOX,POBOX,PO BOX,P.O. BOX,P.O.BOX</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:MobileCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:MobileCodeHidden</stringProp>
                  <stringProp name="Argument.value">65,91</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AddressVerificationCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AddressVerificationCheck</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssociatedASPHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssociatedASPHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CountryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CountryHidden</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDINCORRECTSN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDINCORRECTSN</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SolutionTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SolutionTextBox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboPickupCarrier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboPickupCarrier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:h_IDResource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:h_IDResource</stringProp>
                  <stringProp name="Argument.value">P1005Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ExpDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ExpDateHidden</stringProp>
                  <stringProp name="Argument.value">6/4/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISSameAsBillingHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISSameAsBillingHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:MobileHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:MobileHidden</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtFiscalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtFiscalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ISASPREASSIGNHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ISASPREASSIGNHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OOWProductLineHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OOWProductLineHidden</stringProp>
                  <stringProp name="Argument.value">C22S,C33G,C24S,C21S,C36S,C38S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CountryHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CountryHiddenField</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ManualTextHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ManualTextHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboTicketType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboTicketType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:cboCustomerType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:cboCustomerType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DefCodeHiddenValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DefCodeHiddenValue</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AfsAccountNumberHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AfsAccountNumberHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:cboAssetCategory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:cboAssetCategory</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseModeinCase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseModeinCase</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:PhoneHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:PhoneHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtAcerAdv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtAcerAdv</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtCity" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtCity</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formOptions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formOptions</stringProp>
                  <stringProp name="Argument.value">{  &#xd;
   &quot;type&quot;:&quot;object&quot;,&#xd;
   &quot;focus&quot;:false,&#xd;
   &quot;helpers&quot;:[  &#xd;
&#xd;
   ],&#xd;
   &quot;validate&quot;:true,&#xd;
   &quot;disabled&quot;:false,&#xd;
   &quot;showMessages&quot;:true,&#xd;
   &quot;collapsible&quot;:false,&#xd;
   &quot;legendStyle&quot;:&quot;button&quot;,&#xd;
   &quot;fields&quot;:{  &#xd;
      &quot;IDTicket&quot;:{  &#xd;
         &quot;type&quot;:&quot;text&quot;,&#xd;
         &quot;label&quot;:&quot;IDTicket&quot;,&#xd;
         &quot;validate&quot;:true,&#xd;
         &quot;showMessages&quot;:true,&#xd;
         &quot;helpers&quot;:[  &#xd;
&#xd;
         ],&#xd;
         &quot;disabled&quot;:false,&#xd;
         &quot;hidden&quot;:true,&#xd;
         &quot;renderButtons&quot;:true,&#xd;
         &quot;data&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;attributes&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;allowOptionalEmpty&quot;:true,&#xd;
         &quot;autocomplete&quot;:false,&#xd;
         &quot;disallowEmptySpaces&quot;:false,&#xd;
         &quot;disallowOnlyEmptySpaces&quot;:false,&#xd;
         &quot;fields&quot;:{  &#xd;
&#xd;
         }&#xd;
      },&#xd;
      &quot;Price&quot;:{  &#xd;
         &quot;type&quot;:&quot;number&quot;,&#xd;
         &quot;label&quot;:&quot;Price&quot;,&#xd;
         &quot;validate&quot;:true,&#xd;
         &quot;showMessages&quot;:true,&#xd;
         &quot;helpers&quot;:[  &#xd;
&#xd;
         ],&#xd;
         &quot;disabled&quot;:false,&#xd;
         &quot;renderButtons&quot;:true,&#xd;
         &quot;data&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;attributes&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;numericEntry&quot;:false,&#xd;
         &quot;allowOptionalEmpty&quot;:true,&#xd;
         &quot;autocomplete&quot;:false,&#xd;
         &quot;disallowEmptySpaces&quot;:false,&#xd;
         &quot;disallowOnlyEmptySpaces&quot;:false,&#xd;
         &quot;placeholder&quot;:&quot;Enter Price&quot;,&#xd;
         &quot;fields&quot;:{  &#xd;
&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AFSAccountNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AFSAccountNo</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerserveyvisibleHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerserveyvisibleHidden</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SearchTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SearchTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtSNID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtSNID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:CheckFromPageHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:CheckFromPageHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorResultHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorResultHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:IDAssetHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:IDAssetHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DateCreationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DateCreationHidden</stringProp>
                  <stringProp name="Argument.value">1/1/0001</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:IDCountryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:IDCountryHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtPhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtPhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MaxMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MaxMobileNo</stringProp>
                  <stringProp name="Argument.value">14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:Statehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:Statehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:HDADBNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:HDADBNameHidden</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:PriorityDefaultValuehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:PriorityDefaultValuehidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formdata" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formdata</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPOPCHANGED" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPOPCHANGED</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CIDHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:cboAvailabilityFrom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:cboAvailabilityFrom</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:BufferMonthsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:BufferMonthsHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:MobileCountryField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:MobileCountryField</stringProp>
                  <stringProp name="Argument.value">Germany [49]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formdata" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formdata</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtRemarks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtRemarks</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:PostalCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:PostalCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtRemarks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtRemarks</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:IsAssignToDivHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:IsAssignToDivHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:IsEnableChkOption" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:IsEnableChkOption</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:ShowMoreInfoTab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:ShowMoreInfoTab</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:POPAvailableHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:POPAvailableHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtAFSAccountNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtAFSAccountNumber</stringProp>
                  <stringProp name="Argument.value">10000011-10062386</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formSchema" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formSchema</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtLookup" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtLookup</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendPermissionHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendPermissionHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:TicketPriorityhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:TicketPriorityhidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:Updateclickhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:Updateclickhidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AssignToTxt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AssignToTxt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="HiddenElements" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">HiddenElements</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ReasonCodeDropdownlist" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ReasonCodeDropdownlist</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ProblemTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ProblemTextBox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyExpDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyExpDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerPOBOXValidationRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerPOBOXValidationRequired</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AvailTimeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AvailTimeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactIsSendSMSHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactIsSendSMSHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value">${ViewState1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:BufferExpDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:BufferExpDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:RetainProductHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:RetainProductHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:NameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:NameHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtSN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtSN</stringProp>
                  <stringProp name="Argument.value">${SNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PartNumberCopyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PartNumberCopyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactMobilehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactMobilehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:IsClosecaseHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:IsClosecaseHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_repairflag" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_repairflag</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:WarrantyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:WarrantyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:LoggedResourceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:LoggedResourceHidden</stringProp>
                  <stringProp name="Argument.value">P1005Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__LASTFOCUS" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__LASTFOCUS</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeSelectedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeSelectedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MobilePhoneHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MobilePhoneHidden</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:selected_tab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:selected_tab</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_IDResourceOrGroup" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_IDResourceOrGroup</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IsNewCustomerHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IsNewCustomerHidden</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:cboLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:cboLanguage</stringProp>
                  <stringProp name="Argument.value">ENG</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:LabourWarrantyExpHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:LabourWarrantyExpHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:HideProductLineDropDown" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:HideProductLineDropDown</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SelectedBrandHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SelectedBrandHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:InformationCaseTypeValueHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:InformationCaseTypeValueHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:OriginalBrandHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:OriginalBrandHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:OldCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:OldCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:UnderSpareOnlyWarrantyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:UnderSpareOnlyWarrantyHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtEMail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtEMail</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PartModelHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PartModelHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PurchaseDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PurchaseDateHidden</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_IDResource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_IDResource</stringProp>
                  <stringProp name="Argument.value">P1005Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToVerificationNotesTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToVerificationNotesTextBox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ShipToNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ShipToNameHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:CallFromHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:CallFromHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:VerificationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:VerificationHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formSchema" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formSchema</stringProp>
                  <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;type&quot;:&quot;object&quot;,&#xd;
   &quot;SPName&quot;:&quot;AcerCSS_CSS_SaveCustomizeData_CaseCreationMoreInfo_SP&quot;,&#xd;
   &quot;required&quot;:false,&#xd;
   &quot;properties&quot;:{  &#xd;
      &quot;IDTicket&quot;:{  &#xd;
         &quot;type&quot;:&quot;string&quot;,&#xd;
         &quot;required&quot;:false,&#xd;
         &quot;Parameter&quot;:&quot;IDTicket&quot;,&#xd;
         &quot;default&quot;:&quot;0&quot;,&#xd;
         &quot;properties&quot;:{  &#xd;
&#xd;
         }&#xd;
      },&#xd;
      &quot;Price&quot;:{  &#xd;
         &quot;type&quot;:&quot;number&quot;,&#xd;
         &quot;required&quot;:false,&#xd;
         &quot;Parameter&quot;:&quot;Price&quot;,&#xd;
         &quot;default&quot;:&quot;0.00&quot;,&#xd;
         &quot;maxLength&quot;:15,&#xd;
         &quot;properties&quot;:{  &#xd;
&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:StateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:StateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formOptions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formOptions</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ContactNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ContactNameHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtStdRegID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtStdRegID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ODMWarrantyIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ODMWarrantyIDHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DateFormatHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DateFormatHidden</stringProp>
                  <stringProp name="Argument.value">MM/dd/yyyy</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PartCreationURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PartCreationURL</stringProp>
                  <stringProp name="Argument.value">http://pls-uat.emea.intra.acer.com/csm/Pages/CSSSparesMaster.aspx?Source=CSS&amp;Banner=NO&amp;UserID=P1005Z&amp;Entity=ACG</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CheckCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CheckCountry</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DefaultFreightID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DefaultFreightID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FGHiddenValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FGHiddenValue</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboTicketPriority" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboTicketPriority</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WtyTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WtyTextBox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeListBox_Hidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeListBox_Hidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:RecallsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:RecallsHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:cityHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:cityHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerInfoHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerInfoHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ShipToAddressHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ShipToAddressHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:GenerateSNoCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:GenerateSNoCheck</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtEmailCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtEmailCheck</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboWarrantyClassification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboWarrantyClassification</stringProp>
                  <stringProp name="Argument.value">RTISW</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressvalidationReqHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressvalidationReqHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:cboProductBrand" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:cboProductBrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtAddress4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtAddress4</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtVATCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtVATCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AHDResourceIDhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AHDResourceIDhidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:VerificationNotesforSave" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:VerificationNotesforSave</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ReasonsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ReasonsHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:cboCountryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:cboCountryHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToCityTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToCityTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtFAX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtFAX</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OOWCaseStatusHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OOWCaseStatusHidden</stringProp>
                  <stringProp name="Argument.value">S1,S3,S7,S6N,S10,S10N,S15,S18,S2,S6,S7N,S8,S8N,S9,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ProvinceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ProvinceHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtCompanyName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtCompanyName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FOSCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FOSCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AppoinmentDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AppoinmentDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PurchaseDateChangedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PurchaseDateChangedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressVerificationHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressVerificationHiddenField</stringProp>
                  <stringProp name="Argument.value">-1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboProductLine" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboProductLine</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShowMoreInfoTab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShowMoreInfoTab</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:HDADBNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:HDADBNameHidden</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IdsiteHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IdsiteHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ConfiguredCaseType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ConfiguredCaseType</stringProp>
                  <stringProp name="Argument.value">,1,T14S,T25N,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ASPTextHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ASPTextHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:CountyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:CountyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShipToAddHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShipToAddHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:PickupCarrierSelectedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:PickupCarrierSelectedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressValidatorResultHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressValidatorResultHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:faxHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:faxHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactIDhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactIDhidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorResultEditModeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorResultEditModeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ASPHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ASPHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DeletedFailureCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DeletedFailureCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MinMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MinMobileNo</stringProp>
                  <stringProp name="Argument.value">9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:CheckCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:CheckCountry</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:OldPartNumberHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:OldPartNumberHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:Custinfochanged" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:Custinfochanged</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ProblemTextHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ProblemTextHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FastSystemURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FastSystemURLHidden</stringProp>
                  <stringProp name="Argument.value">http://whatsin-uat.acer.com.tw/Internal/pages/WhatsInLink.aspx?</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ISTransferredHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ISTransferredHidden</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressvalidationReqHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressvalidationReqHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ISCaseTypeChangeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ISCaseTypeChangeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerSourceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerSourceHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToZipCodeTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToZipCodeTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AddressVerificationStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AddressVerificationStatus</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactIsSendEmailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactIsSendEmailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value">SR_CASE$ucProduct$SNSearchImageButton</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseAssignToHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseAssignToHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OldPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OldPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPRODLINE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPRODLINE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PartNumberHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PartNumberHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:MaxMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:MaxMobileNo</stringProp>
                  <stringProp name="Argument.value">14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:initialformdata" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:initialformdata</stringProp>
                  <stringProp name="Argument.value">{&quot;IDTicket&quot;:&quot;0&quot;,&quot;Price&quot;:0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboRepairCenter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboRepairCenter</stringProp>
                  <stringProp name="Argument.value">83405F80-2D3A-4697-9A74-B4AAF5F7F6F9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressInfoChangedHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressInfoChangedHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SpareWarrantyExpHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SpareWarrantyExpHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ProdLineDefTicketTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ProdLineDefTicketTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ShipmentCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ShipmentCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value">T25N,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formName</stringProp>
                  <stringProp name="Argument.value">CaseCreationMoreInfo</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:HDADBName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:HDADBName</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerRefFlag" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerRefFlag</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressValidatorHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressValidatorHidden</stringProp>
                  <stringProp name="Argument.value">ADDRESSVALIDATION</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SNAvailableHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SNAvailableHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressValidatorHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressValidatorHidden</stringProp>
                  <stringProp name="Argument.value">ADDRESSVALIDATION</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PreviousPurchaseDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PreviousPurchaseDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ZipcodeurlHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ZipcodeurlHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtPurchaseDatenew" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtPurchaseDatenew</stringProp>
                  <stringProp name="Argument.value">2020-06-04</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipmentAddressIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipmentAddressIDHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RecallsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RecallsHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendProductlines" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendProductlines</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DefaultCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DefaultCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:TicketTypeChangedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:TicketTypeChangedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PNHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PNHidden</stringProp>
                  <stringProp name="Argument.value">[object Object]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_Destination" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_Destination</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:NewPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:NewPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ShippingCarrierHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ShippingCarrierHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ResourceChangeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ResourceChangeHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressPOBOXDataHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressPOBOXDataHidden</stringProp>
                  <stringProp name="Argument.value">POB,APO,FPO,POST OFFICE BOX,POBOX,PO BOX,P.O. BOX,P.O.BOX</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PHASEOUTDATEHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PHASEOUTDATEHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtMobilePhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtMobilePhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtPN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtPN</stringProp>
                  <stringProp name="Argument.value">[object Object]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ProductLineChangedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ProductLineChangedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:OnsiteHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:OnsiteHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SpareOnlyWarrantyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SpareOnlyWarrantyHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AHDRepairCenterHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AHDRepairCenterHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ResourceField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ResourceField</stringProp>
                  <stringProp name="Argument.value">Szopinska Paulina</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AlternateCustomerIDTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AlternateCustomerIDTextBox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtPostalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtPostalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerIDHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:DateFormatHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:DateFormatHidden</stringProp>
                  <stringProp name="Argument.value">MM/dd/yyyy</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressValidatorWebAPIURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressValidatorWebAPIURLHidden</stringProp>
                  <stringProp name="Argument.value">http://sertec360-uat.emea.intra.acer.com/AddressValidator/api/AddressValidator/ValidateAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISAFSExistHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISAFSExistHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">AF7653EC</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FastSystemuname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FastSystemuname</stringProp>
                  <stringProp name="Argument.value">uHKBfUfZ1yx95NyC3CusyPUY1g9w1Y/9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ProductionDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ProductionDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ClosedCaseHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ClosedCaseHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToCountryTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToCountryTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressVerificationCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressVerificationCheck</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:h_IDCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:h_IDCountry</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISContactChangehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISContactChangehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDSWAPREQUEST" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDSWAPREQUEST</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboTicketStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboTicketStatus</stringProp>
                  <stringProp name="Argument.value">S1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressPOBOXValidationRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressPOBOXValidationRequired</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:StateDropDownList" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:StateDropDownList</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ParentIDSiteTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ParentIDSiteTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IDCustomerhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IDCustomerhidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPURDATECHANGE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPURDATECHANGE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PartModelHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PartModelHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyClassificationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyClassificationHidden</stringProp>
                  <stringProp name="Argument.value">In Warranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:MinMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:MinMobileNo</stringProp>
                  <stringProp name="Argument.value">9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:DealerTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:DealerTextBox</stringProp>
                  <stringProp name="Argument.value">Others - Germany</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ProductDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ProductDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FastSystempwd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FastSystempwd</stringProp>
                  <stringProp name="Argument.value">e+eLpQ78HoKOczNY7h60VA==</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ReasonCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ReasonCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value">,T19C,T20C,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SessionHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SessionHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:txtRegion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:txtRegion</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtAppointmentDateNew" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtAppointmentDateNew</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:HDADBHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:HDADBHidden</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ShipToAddressValidatorNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ShipToAddressValidatorNameHidden</stringProp>
                  <stringProp name="Argument.value">ADDRESSVALIDATION</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:AssetValidateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:AssetValidateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressValidatorWebAPIURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressValidatorWebAPIURLHidden</stringProp>
                  <stringProp name="Argument.value">http://sertec360-uat.emea.intra.acer.com/AddressValidator/api/AddressValidator/ValidateAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:txtID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:txtID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SNHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SNHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IDCustomerSubTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IDCustomerSubTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:RepairCaseStatusHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:RepairCaseStatusHidden</stringProp>
                  <stringProp name="Argument.value">S1,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AddressVerifyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AddressVerifyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtIMEI1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtIMEI1</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:EditCaseWarrantyClassificationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:EditCaseWarrantyClassificationHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:Instr_CaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:Instr_CaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtIMEI2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtIMEI2</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:cboAvailabilityTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:cboAvailabilityTo</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDNOPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDNOPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:EmailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:EmailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:StateDropdownvaluehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:StateDropdownvaluehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShipmentAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShipmentAddress</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseTypeFilterHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseTypeFilterHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignedResourceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignedResourceHidden</stringProp>
                  <stringProp name="Argument.value">P1209Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:EMailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:EMailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerMailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerMailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPRODLINECHANGE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPRODLINECHANGE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToCustomerTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToCustomerTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RefNumberTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RefNumberTextBox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:LocationIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:LocationIDHidden</stringProp>
                  <stringProp name="Argument.value">83405f80-2d3a-4697-9a74-b4aaf5f7f6f9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:CurrentDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:CurrentDateHidden</stringProp>
                  <stringProp name="Argument.value">6/4/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RequestCreatedDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RequestCreatedDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:FedEXHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:FedEXHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:SameAsBillingCheckBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:SameAsBillingCheckBox</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ValidatePhaseOutDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ValidatePhaseOutDateHidden</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorWebAPIURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorWebAPIURLHidden</stringProp>
                  <stringProp name="Argument.value">http://sertec360-uat.emea.intra.acer.com/AddressValidator/api/AddressValidator/ValidateAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:WarrExpiryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:WarrExpiryHidden</stringProp>
                  <stringProp name="Argument.value">1/1/0001 12:00:00 AM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressvalidationReqHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressvalidationReqHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendReasonHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendReasonHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CopySymptomtoProblem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CopySymptomtoProblem</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:TicketClosedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:TicketClosedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:GSNAssetSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:GSNAssetSource</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SalesOrginCountryDownList" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SalesOrginCountryDownList</stringProp>
                  <stringProp name="Argument.value">AFG</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:AllowOOWCaseCreationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:AllowOOWCaseCreationHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtAddress</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CountryField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CountryField</stringProp>
                  <stringProp name="Argument.value">Germany [49]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DefaultShippingFreightID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DefaultShippingFreightID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ShipmentCarrierSelectedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ShipmentCarrierSelectedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyExp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyExp</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RepairTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RepairTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ResourceHiddenValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ResourceHiddenValue</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:DealerIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:DealerIDHidden</stringProp>
                  <stringProp name="Argument.value">10054</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressValidatorResultHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressValidatorResultHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ReasonCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ReasonCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISActiveHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISActiveHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AgentLocaleHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AgentLocaleHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:OnSiteWarrantyExpHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:OnSiteWarrantyExpHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AutoAssignIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AutoAssignIDHidden</stringProp>
                  <stringProp name="Argument.value">P1209Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AgentRoleHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AgentRoleHidden</stringProp>
                  <stringProp name="Argument.value">SenCCR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MobileCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MobileCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/PageProxy.aspx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://sertec360-uat.emea.intra.acer.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">29513</stringProp>
            </ConstantTimer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ViewState2</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; id=&quot;__VIEWSTATE&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">ViewState2Notfound</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetSNLength" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetSNLength</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetSNLength" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetSNLength</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Pages/Ajax/PATAjaxCalls.aspx?Type=CalculateWarranty&amp;IDWarranty=G00&amp;PurchaseDate=06/04/2020&amp;XtwIdwarranty=&amp;IDAsset=H16340DE" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">CalculateWarranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PurchaseDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PurchaseDate</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDWarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDWarranty</stringProp>
                  <stringProp name="Argument.value">G00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="XtwIdwarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">XtwIdwarranty</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDAsset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDAsset</stringProp>
                  <stringProp name="Argument.value">H16340DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Pages/Ajax/PATAjaxCalls.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Services/Ajax.asmx/GetPickupCarrier" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;IDLocation&apos;:&apos;83405F80-2D3A-4697-9A74-B4AAF5F7F6F9&apos;,&apos;isPickup&apos;:&apos;true&apos;,&apos;ShipTypeWithCarrier&apos;:&apos;true&apos; }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Services/Ajax.asmx/GetPickupCarrier</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/SNDetails/api/Alerts/Get?serialNo=544037AL011908359B58416B27&amp;caseId=&amp;userId=P1005Z&amp;snId=&amp;productline=C22S&amp;partnumber=[object%20Object]&amp;customerId=&amp;dbname=ACGCSS&amp;pagename=CaseCreation%20&amp;lang=EN" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="productline" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">productline</stringProp>
                  <stringProp name="Argument.value">C22S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">snId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dbname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dbname</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="caseId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">caseId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="customerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">customerId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lang" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lang</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">userId</stringProp>
                  <stringProp name="Argument.value">P1005Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="partnumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">partnumber</stringProp>
                  <stringProp name="Argument.value">[object Object]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serialNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">serialNo</stringProp>
                  <stringProp name="Argument.value">${SNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pagename" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pagename</stringProp>
                  <stringProp name="Argument.value">CaseCreation </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">SNDetails/api/Alerts/Get</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Pages/Ajax/PATAjaxCalls.aspx?Type=CalculateLabourandSpareWarranty&amp;IDWarranty=G00&amp;PurchaseDate=06/04/2020&amp;SerialNumber=544037AL011908359B58416B27&amp;XtwIdwarranty=" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">CalculateLabourandSpareWarranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SerialNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">SerialNumber</stringProp>
                  <stringProp name="Argument.value">${SNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PurchaseDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PurchaseDate</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDWarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDWarranty</stringProp>
                  <stringProp name="Argument.value">G00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="XtwIdwarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">XtwIdwarranty</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Pages/Ajax/PATAjaxCalls.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Services/Ajax.asmx/GetDefaultPickupCarriershiptype" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;IDLocation&apos;:&apos;83405F80-2D3A-4697-9A74-B4AAF5F7F6F9&apos;,&apos;Country&apos;:&apos;DE&apos;,&apos;State&apos;:&apos;&apos; }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Services/Ajax.asmx/GetDefaultPickupCarriershiptype</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Pages/Ajax/AjaxCalls.aspx?Type=CheckSpareWarranty&amp;IDWarranty=G00&amp;PurchaseDate=06/04/2020" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">CheckSpareWarranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PurchaseDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PurchaseDate</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDWarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDWarranty</stringProp>
                  <stringProp name="Argument.value">G00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Pages/Ajax/AjaxCalls.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CustSearch" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/PageProxy.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="SR_CASE:CaseModeHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CaseModeHiddenField</stringProp>
                  <stringProp name="Argument.value">Simple</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToSNTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToSNTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerPOBOXDataHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerPOBOXDataHidden</stringProp>
                  <stringProp name="Argument.value">POB,APO,FPO,POST OFFICE BOX,POBOX,PO BOX,P.O. BOX,P.O.BOX</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:MobileCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:MobileCodeHidden</stringProp>
                  <stringProp name="Argument.value">65,91</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AddressVerificationCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AddressVerificationCheck</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssociatedASPHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssociatedASPHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CountryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CountryHidden</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDINCORRECTSN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDINCORRECTSN</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SolutionTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SolutionTextBox</stringProp>
                  <stringProp name="Argument.value">asdasd</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboPickupCarrier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboPickupCarrier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:h_IDResource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:h_IDResource</stringProp>
                  <stringProp name="Argument.value">P1005Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ExpDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ExpDateHidden</stringProp>
                  <stringProp name="Argument.value">6/4/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISSameAsBillingHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISSameAsBillingHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:MobileHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:MobileHidden</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtFiscalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtFiscalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ISASPREASSIGNHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ISASPREASSIGNHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OOWProductLineHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OOWProductLineHidden</stringProp>
                  <stringProp name="Argument.value">C22S,C33G,C24S,C21S,C36S,C38S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CountryHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CountryHiddenField</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ManualTextHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ManualTextHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboTicketType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboTicketType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:cboCustomerType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:cboCustomerType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DefCodeHiddenValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DefCodeHiddenValue</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AfsAccountNumberHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AfsAccountNumberHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:cboAssetCategory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:cboAssetCategory</stringProp>
                  <stringProp name="Argument.value">C22S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseModeinCase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseModeinCase</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:PhoneHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:PhoneHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtAcerAdv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtAcerAdv</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtCity" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtCity</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formOptions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formOptions</stringProp>
                  <stringProp name="Argument.value">{  &#xd;
   &quot;type&quot;:&quot;object&quot;,&#xd;
   &quot;focus&quot;:false,&#xd;
   &quot;helpers&quot;:[  &#xd;
&#xd;
   ],&#xd;
   &quot;validate&quot;:true,&#xd;
   &quot;disabled&quot;:false,&#xd;
   &quot;showMessages&quot;:true,&#xd;
   &quot;collapsible&quot;:false,&#xd;
   &quot;legendStyle&quot;:&quot;button&quot;,&#xd;
   &quot;fields&quot;:{  &#xd;
      &quot;IDTicket&quot;:{  &#xd;
         &quot;type&quot;:&quot;text&quot;,&#xd;
         &quot;label&quot;:&quot;IDTicket&quot;,&#xd;
         &quot;validate&quot;:true,&#xd;
         &quot;showMessages&quot;:true,&#xd;
         &quot;helpers&quot;:[  &#xd;
&#xd;
         ],&#xd;
         &quot;disabled&quot;:false,&#xd;
         &quot;hidden&quot;:true,&#xd;
         &quot;renderButtons&quot;:true,&#xd;
         &quot;data&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;attributes&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;allowOptionalEmpty&quot;:true,&#xd;
         &quot;autocomplete&quot;:false,&#xd;
         &quot;disallowEmptySpaces&quot;:false,&#xd;
         &quot;disallowOnlyEmptySpaces&quot;:false,&#xd;
         &quot;fields&quot;:{  &#xd;
&#xd;
         }&#xd;
      },&#xd;
      &quot;Price&quot;:{  &#xd;
         &quot;type&quot;:&quot;number&quot;,&#xd;
         &quot;label&quot;:&quot;Price&quot;,&#xd;
         &quot;validate&quot;:true,&#xd;
         &quot;showMessages&quot;:true,&#xd;
         &quot;helpers&quot;:[  &#xd;
&#xd;
         ],&#xd;
         &quot;disabled&quot;:false,&#xd;
         &quot;renderButtons&quot;:true,&#xd;
         &quot;data&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;attributes&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;numericEntry&quot;:false,&#xd;
         &quot;allowOptionalEmpty&quot;:true,&#xd;
         &quot;autocomplete&quot;:false,&#xd;
         &quot;disallowEmptySpaces&quot;:false,&#xd;
         &quot;disallowOnlyEmptySpaces&quot;:false,&#xd;
         &quot;placeholder&quot;:&quot;Enter Price&quot;,&#xd;
         &quot;fields&quot;:{  &#xd;
&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AFSAccountNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AFSAccountNo</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerserveyvisibleHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerserveyvisibleHidden</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SearchTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SearchTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtSNID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtSNID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:CheckFromPageHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:CheckFromPageHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorResultHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorResultHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:IDAssetHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:IDAssetHidden</stringProp>
                  <stringProp name="Argument.value">H16340DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DateCreationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DateCreationHidden</stringProp>
                  <stringProp name="Argument.value">1/1/0001</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:IDCountryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:IDCountryHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtPhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtPhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MaxMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MaxMobileNo</stringProp>
                  <stringProp name="Argument.value">14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:Statehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:Statehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:HDADBNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:HDADBNameHidden</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:PriorityDefaultValuehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:PriorityDefaultValuehidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formdata" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formdata</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPOPCHANGED" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPOPCHANGED</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CIDHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:cboAvailabilityFrom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:cboAvailabilityFrom</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:BufferMonthsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:BufferMonthsHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:MobileCountryField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:MobileCountryField</stringProp>
                  <stringProp name="Argument.value">Germany [49]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formdata" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formdata</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtRemarks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtRemarks</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:PostalCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:PostalCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtRemarks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtRemarks</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:IsAssignToDivHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:IsAssignToDivHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:IsEnableChkOption" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:IsEnableChkOption</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:ShowMoreInfoTab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:ShowMoreInfoTab</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:POPAvailableHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:POPAvailableHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtAFSAccountNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtAFSAccountNumber</stringProp>
                  <stringProp name="Argument.value">10000011-10062386</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formSchema" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formSchema</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendPermissionHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendPermissionHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:TicketPriorityhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:TicketPriorityhidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:Updateclickhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:Updateclickhidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AssignToTxt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AssignToTxt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="HiddenElements" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">HiddenElements</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ReasonCodeDropdownlist" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ReasonCodeDropdownlist</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ProblemTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ProblemTextBox</stringProp>
                  <stringProp name="Argument.value">System Failure:    Ubuntu |   Manual Failure: NA ||</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyExpDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyExpDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerPOBOXValidationRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerPOBOXValidationRequired</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AvailTimeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AvailTimeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactIsSendSMSHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactIsSendSMSHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value">${ViewState2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:BufferExpDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:BufferExpDateHidden</stringProp>
                  <stringProp name="Argument.value">1/1/1900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:RetainProductHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:RetainProductHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:NameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:NameHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtSN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtSN</stringProp>
                  <stringProp name="Argument.value">${SNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PartNumberCopyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PartNumberCopyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactMobilehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactMobilehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:IsClosecaseHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:IsClosecaseHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_repairflag" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_repairflag</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:WarrantyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:WarrantyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:LoggedResourceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:LoggedResourceHidden</stringProp>
                  <stringProp name="Argument.value">P1005Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__LASTFOCUS" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__LASTFOCUS</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeSelectedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeSelectedHidden</stringProp>
                  <stringProp name="Argument.value">,77540958-1d3a-4420-8cfa-28eb318b4c3b,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MobilePhoneHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MobilePhoneHidden</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:selected_tab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:selected_tab</stringProp>
                  <stringProp name="Argument.value">#Customer</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_IDResourceOrGroup" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_IDResourceOrGroup</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IsNewCustomerHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IsNewCustomerHidden</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:cboLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:cboLanguage</stringProp>
                  <stringProp name="Argument.value">ENG</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:LabourWarrantyExpHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:LabourWarrantyExpHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:HideProductLineDropDown" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:HideProductLineDropDown</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SelectedBrandHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SelectedBrandHiddenField</stringProp>
                  <stringProp name="Argument.value">ACER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:InformationCaseTypeValueHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:InformationCaseTypeValueHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:OriginalBrandHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:OriginalBrandHiddenField</stringProp>
                  <stringProp name="Argument.value">ACER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:OldCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:OldCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:UnderSpareOnlyWarrantyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:UnderSpareOnlyWarrantyHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtEMail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtEMail</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PartModelHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PartModelHiddenField</stringProp>
                  <stringProp name="Argument.value">CM-BOARD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PurchaseDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PurchaseDateHidden</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_IDResource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_IDResource</stringProp>
                  <stringProp name="Argument.value">P1005Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToVerificationNotesTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToVerificationNotesTextBox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ShipToNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ShipToNameHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:CallFromHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:CallFromHidden</stringProp>
                  <stringProp name="Argument.value">CSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:VerificationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:VerificationHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formSchema" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formSchema</stringProp>
                  <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;type&quot;:&quot;object&quot;,&#xd;
   &quot;SPName&quot;:&quot;AcerCSS_CSS_SaveCustomizeData_CaseCreationMoreInfo_SP&quot;,&#xd;
   &quot;required&quot;:false,&#xd;
   &quot;properties&quot;:{  &#xd;
      &quot;IDTicket&quot;:{  &#xd;
         &quot;type&quot;:&quot;string&quot;,&#xd;
         &quot;required&quot;:false,&#xd;
         &quot;Parameter&quot;:&quot;IDTicket&quot;,&#xd;
         &quot;default&quot;:&quot;0&quot;,&#xd;
         &quot;properties&quot;:{  &#xd;
&#xd;
         }&#xd;
      },&#xd;
      &quot;Price&quot;:{  &#xd;
         &quot;type&quot;:&quot;number&quot;,&#xd;
         &quot;required&quot;:false,&#xd;
         &quot;Parameter&quot;:&quot;Price&quot;,&#xd;
         &quot;default&quot;:&quot;0.00&quot;,&#xd;
         &quot;maxLength&quot;:15,&#xd;
         &quot;properties&quot;:{  &#xd;
&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:StateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:StateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formOptions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formOptions</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ContactNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ContactNameHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyTypeHidden</stringProp>
                  <stringProp name="Argument.value">G00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtStdRegID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtStdRegID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ODMWarrantyIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ODMWarrantyIDHidden</stringProp>
                  <stringProp name="Argument.value">12:00:00 AM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DateFormatHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DateFormatHidden</stringProp>
                  <stringProp name="Argument.value">MM/dd/yyyy</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PartCreationURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PartCreationURL</stringProp>
                  <stringProp name="Argument.value">http://pls-uat.emea.intra.acer.com/csm/Pages/CSSSparesMaster.aspx?Source=CSS&amp;Banner=NO&amp;UserID=P1005Z&amp;Entity=ACG</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CheckCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CheckCountry</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DefaultFreightID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DefaultFreightID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FGHiddenValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FGHiddenValue</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboTicketPriority" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboTicketPriority</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WtyTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WtyTextBox</stringProp>
                  <stringProp name="Argument.value">No Warranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeListBox_Hidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeListBox_Hidden</stringProp>
                  <stringProp name="Argument.value"> [{ &quot;id&quot;: &quot;7eafceeb-95a4-4eca-b72f-0d19c2596e18&quot;, &quot;text&quot;: &quot;OPERATING SYSTEM&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;aa8e60ac-c616-45a8-bceb-0d4b72562084&quot;, &quot;text&quot;: &quot;MS XP&quot;},{ &quot;id&quot;: &quot;5b45a44b-6e7b-40d6-ab4d-1bf4ea99c049&quot;, &quot;text&quot;: &quot;MS Win7&quot;},{ &quot;id&quot;: &quot;c11b8ecb-bdc1-45b5-a810-27dac2b3c89d&quot;, &quot;text&quot;: &quot;Linpus&quot;},{ &quot;id&quot;: &quot;77540958-1d3a-4420-8cfa-28eb318b4c3b&quot;, &quot;text&quot;: &quot;Ubuntu&quot;},{ &quot;id&quot;: &quot;1bc31a2b-72e2-45eb-9e93-3461cee25f13&quot;, &quot;text&quot;: &quot;MS Vista&quot;},{ &quot;id&quot;: &quot;ecb51059-73ec-4491-98ea-96972576b3e9&quot;, &quot;text&quot;: &quot;Windows 7 Free Upgrade&quot;} ]},{ &quot;id&quot;: &quot;0046547b-b8e3-4550-a996-2dfc750cc871&quot;, &quot;text&quot;: &quot;OS Activation&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;a89b68fe-8ef1-4c41-8348-eac6a463b080&quot;, &quot;text&quot;: &quot;Error message: Not a genuine O/S version&quot;} ]},{ &quot;id&quot;: &quot;381addfb-9fb1-41ad-96bd-37b48c13bc41&quot;, &quot;text&quot;: &quot;LOGISTICS&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;8471cf7a-bb4d-4208-a397-5653b295262d&quot;, &quot;text&quot;: &quot;SHORT SHIPMENT&quot;},{ &quot;id&quot;: &quot;12348c8a-3cbd-42aa-a515-dd4d4434fa4e&quot;, &quot;text&quot;: &quot;WRONG SHIPMENT&quot;} ]},{ &quot;id&quot;: &quot;b5aafda7-c1be-402f-a45c-3b4c1b04eeb6&quot;, &quot;text&quot;: &quot;RETURNED FROM REPAIR&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;874a520a-1378-4220-a8c1-22a5ee79ece4&quot;, &quot;text&quot;: &quot;NOT REPAIRED PROPERLY&quot;},{ &quot;id&quot;: &quot;a6c29569-dfa7-4cd3-a009-2f58c99b4a6a&quot;, &quot;text&quot;: &quot;DAMAGED BUTTON&quot;},{ &quot;id&quot;: &quot;4d0b600d-385b-44be-9ac7-38a8edf4a7f3&quot;, &quot;text&quot;: &quot;MISSING ACCESSORY&quot;},{ &quot;id&quot;: &quot;ae96870d-ce6e-493b-964c-75dc7c5655b7&quot;, &quot;text&quot;: &quot;SCRATCH/CRACK&quot;},{ &quot;id&quot;: &quot;b385ad41-3585-4a82-9da4-7af717c3c8bf&quot;, &quot;text&quot;: &quot;MISSING HARDWARE&quot;},{ &quot;id&quot;: &quot;8d1cff50-4ed1-47f1-b3bb-da1a637963d4&quot;, &quot;text&quot;: &quot;MISSING MEDIA&quot;},{ &quot;id&quot;: &quot;a262e230-8aef-4eec-a43f-e006a8536f4f&quot;, &quot;text&quot;: &quot;SAME PROBLEM&quot;},{ &quot;id&quot;: &quot;cf499e81-c137-4147-85aa-f55e6c3f118b&quot;, &quot;text&quot;: &quot;POOR ASSEMBLY&quot;} ]},{ &quot;id&quot;: &quot;9e1c34b3-bc0a-4678-91e2-3f8506dddbb5&quot;, &quot;text&quot;: &quot;Sandy Bridge&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;fc3dd17e-1585-483d-bae8-480637dcb2c6&quot;, &quot;text&quot;: &quot;NA&quot;} ]},{ &quot;id&quot;: &quot;54e2dce2-b20c-4600-b069-403e4ecdfea5&quot;, &quot;text&quot;: &quot;MECHANICAL / COSMETIC&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;f5493332-a942-467e-9b69-0d6fa66063ad&quot;, &quot;text&quot;: &quot;MECHANICAL MISSING PARTS&quot;},{ &quot;id&quot;: &quot;342c5f3f-68f2-4a3e-88c2-0f8d00b6b9aa&quot;, &quot;text&quot;: &quot;MEMORY COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;86a2a80d-0236-4541-8a10-120bb7854374&quot;, &quot;text&quot;: &quot;CASING SCRATCH&quot;},{ &quot;id&quot;: &quot;b1090821-256c-4503-ac43-1a13a7c9ca88&quot;, &quot;text&quot;: &quot;CASING POOR ASSEMBLY&quot;},{ &quot;id&quot;: &quot;d47609c9-60d7-47da-9a82-1ff76a8b52ea&quot;, &quot;text&quot;: &quot;POWER SUPPLY COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;4080c3e8-56e1-43d9-a176-23afe9ac3c0a&quot;, &quot;text&quot;: &quot;MICROPHONE/SPEAKER COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;fd548583-9be1-4b14-9837-2532ba1e3ff5&quot;, &quot;text&quot;: &quot;CASING GAP&quot;},{ &quot;id&quot;: &quot;086a1e81-a7a9-4cfc-8508-2f3ec250f374&quot;, &quot;text&quot;: &quot;KB COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;da63e6d8-d974-4f1f-a555-31e9866cfcb8&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE NOISY&quot;},{ &quot;id&quot;: &quot;0306f8bb-2e14-4bca-9614-362fb139a773&quot;, &quot;text&quot;: &quot;AUDIO CARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;b34bf0d4-6e78-49ba-8b74-3b8018919f6f&quot;, &quot;text&quot;: &quot;BUTTON STUCK&quot;},{ &quot;id&quot;: &quot;fa36d188-43fd-4e0d-a34f-45d958ba4f67&quot;, &quot;text&quot;: &quot;VGA CARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;0d95bd6a-4bc6-4652-bc8f-54e31b808362&quot;, &quot;text&quot;: &quot;MISCELLANEOUS MISSING PARTS&quot;},{ &quot;id&quot;: &quot;86a98284-5b5f-4746-b0da-647058975129&quot;, &quot;text&quot;: &quot;MISCELLANEOUS COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;422ea4fd-0019-4d30-b245-6c16819d7876&quot;, &quot;text&quot;: &quot;FDD BEZEL BROKEN&quot;},{ &quot;id&quot;: &quot;354b82e9-7025-4d0a-8995-72eee89729fc&quot;, &quot;text&quot;: &quot;MECHANICAL MELT&quot;},{ &quot;id&quot;: &quot;eeb8e4c2-e748-4615-acd9-76c539dbd594&quot;, &quot;text&quot;: &quot;MODEM/LAN CARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;8c938e00-4ab9-4d58-bc7c-80c92630ef3c&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;e7716871-06e0-4fd4-bc12-85c635d5b5eb&quot;, &quot;text&quot;: &quot;PC CARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;c4b3939d-2a4a-42cf-b74d-8e38a0563df4&quot;, &quot;text&quot;: &quot;ADAPTER CONNECTOR BROKEN&quot;},{ &quot;id&quot;: &quot;ef9bd98c-9d4b-4fa2-8c5d-97b0d45671e9&quot;, &quot;text&quot;: &quot;MAINBOARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;7229c108-b5fa-4d1a-9f6d-9fdc7453033d&quot;, &quot;text&quot;: &quot;ACCESSORY COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;9ba8216d-999d-4226-a8b1-a0ec246c886e&quot;, &quot;text&quot;: &quot;BUTTON BROKEN&quot;},{ &quot;id&quot;: &quot;ab2ed07b-3a2c-47ba-917b-a483b35ada7e&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE LED FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;d3dedafc-e16c-4907-99d6-acffb163d8e3&quot;, &quot;text&quot;: &quot;ADAPTER COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;fb7e5537-ee2e-4235-a3f2-bf4f61761c47&quot;, &quot;text&quot;: &quot;HDD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;d570ba2e-fe26-4cc2-968e-c75c8dd8daa3&quot;, &quot;text&quot;: &quot;OTHER STORAGE DEVICE COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;7e6af48f-e471-4ca4-8346-c8ad1bc94ca0&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE TRAY/BEZEL BROKEN&quot;},{ &quot;id&quot;: &quot;1e1790de-061f-400a-a910-c8e979dbf624&quot;, &quot;text&quot;: &quot;MECHANICAL BROKEN&quot;},{ &quot;id&quot;: &quot;4c00ac7c-c59b-4f99-b0db-d2d7ebe4510b&quot;, &quot;text&quot;: &quot;POWER SUPPLY CONNECTOR BROKEN&quot;},{ &quot;id&quot;: &quot;3da1b7d1-cbce-485a-a689-f3f5ad40d06b&quot;, &quot;text&quot;: &quot;THERMAL BROKEN&quot;},{ &quot;id&quot;: &quot;7f5149ad-e4c3-443a-a4ba-fcab1f451ce1&quot;, &quot;text&quot;: &quot;CABLE COSMETIC DAMAGE&quot;} ]},{ &quot;id&quot;: &quot;fce7ed2b-adeb-4fdc-bd22-4656768d3404&quot;, &quot;text&quot;: &quot;NETWORKING/ COMMUNICATION&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;95b0eb64-09a8-4c94-a628-0a09522a5309&quot;, &quot;text&quot;: &quot;MODEM/LAN WONT RECEIVE/SEND FAX&quot;},{ &quot;id&quot;: &quot;41716941-457f-462e-a0a8-210a329a4b72&quot;, &quot;text&quot;: &quot;WIRELESS FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;83edd7f7-31eb-466e-9dc6-21f3510276cd&quot;, &quot;text&quot;: &quot;MODEM NO DIAL TONE&quot;},{ &quot;id&quot;: &quot;49619c11-7b46-4151-93d5-2954932a5919&quot;, &quot;text&quot;: &quot;MODEM/LAN DEAD (NO RESPONSE)&quot;},{ &quot;id&quot;: &quot;fab0e134-5ec2-411c-866b-710eb41b2c64&quot;, &quot;text&quot;: &quot;CONNECTION LOST/POOR SIGNAL&quot;},{ &quot;id&quot;: &quot;81b8c910-d479-4a5f-82a4-7985a2f31a08&quot;, &quot;text&quot;: &quot;WIFI SYNC. ERROR&quot;},{ &quot;id&quot;: &quot;66f20b86-99f0-4e14-b790-7be9357bedde&quot;, &quot;text&quot;: &quot;XDSL CONNECTION FAIL&quot;},{ &quot;id&quot;: &quot;3fd8e1c4-f9b5-409a-a11e-821c4ac38983&quot;, &quot;text&quot;: &quot;BLUETOOTH FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;7a6f5563-00a4-4a94-b89f-97e4832e2751&quot;, &quot;text&quot;: &quot;MODEM/LAN DISCONNECT FREQUENTLY&quot;},{ &quot;id&quot;: &quot;8ef5e8de-8958-4cf8-9ee2-a651f3b17b38&quot;, &quot;text&quot;: &quot;BLUETOOTH CARD NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;3e0572be-e329-4b6d-82c9-b89c9ad2c8f0&quot;, &quot;text&quot;: &quot;MODEM/LAN NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;5c0fa6e0-63cf-4041-9468-c0de21188315&quot;, &quot;text&quot;: &quot;WIRELESS DISCONNECT FREQUENTLY&quot;},{ &quot;id&quot;: &quot;7ae07dde-305a-45e1-b163-d6efefebb446&quot;, &quot;text&quot;: &quot;LONG DURATION ON SEARCHING NETWORK&quot;},{ &quot;id&quot;: &quot;36fa493f-2b7a-4ee2-a8df-fbdedf691a11&quot;, &quot;text&quot;: &quot;MODEM/LAN FAIL TO CONNECT&quot;} ]},{ &quot;id&quot;: &quot;d148c498-eb22-46e1-8ca1-53062c3c204e&quot;, &quot;text&quot;: &quot;RF &amp; TV SIGNAL&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;68a86270-41b9-4f8e-86e9-563e661cab69&quot;, &quot;text&quot;: &quot;ANTENNA FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;de625dcf-8197-4a2e-9136-7e313c6486bd&quot;, &quot;text&quot;: &quot;NO TV SIGNAL&quot;},{ &quot;id&quot;: &quot;80e50fe9-890b-4c50-b2dc-99efe4400487&quot;, &quot;text&quot;: &quot;TV CHANNEL SEARCH FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;64dd737d-8748-455a-ae1d-9c16686c3938&quot;, &quot;text&quot;: &quot;RF NO SIGNAL&quot;},{ &quot;id&quot;: &quot;b740b166-f6c9-4e16-99db-b2d131e103cd&quot;, &quot;text&quot;: &quot;POOR SIGNAL&quot;},{ &quot;id&quot;: &quot;07b9a1e7-06c6-49de-a53c-b468e0206113&quot;, &quot;text&quot;: &quot;POOR RF SIGNAL&quot;},{ &quot;id&quot;: &quot;66fdd8b5-08ea-4abf-9e20-d6a7498f461f&quot;, &quot;text&quot;: &quot;TV CHANNEL SELECTION DELAY&quot;} ]},{ &quot;id&quot;: &quot;e1c07305-5bea-4786-8d54-53de17536f78&quot;, &quot;text&quot;: &quot;Configuring and Maintaining &quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;e567e26b-6ce7-4316-8655-8b3fa19670db&quot;, &quot;text&quot;: &quot;Windows Update&quot;} ]},{ &quot;id&quot;: &quot;7657b5f2-eed4-4eeb-b106-57758ea52526&quot;, &quot;text&quot;: &quot;DISPLAY&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;184be1f4-10a6-4dc9-aef5-25a35e3b6a04&quot;, &quot;text&quot;: &quot;PICTURE SHAKIN&quot;},{ &quot;id&quot;: &quot;33f0f0d5-1d0e-4e5b-8430-2a5648db9094&quot;, &quot;text&quot;: &quot;PICTURE SHIFTING&quot;},{ &quot;id&quot;: &quot;ef618149-3347-43a2-8712-518982fa29ad&quot;, &quot;text&quot;: &quot;WHITE SCREEN&quot;},{ &quot;id&quot;: &quot;6cc2b81c-71ed-4cda-a608-5af573ad3626&quot;, &quot;text&quot;: &quot;VIDEO NOT SYNC (PICTURE CHANGE BUT OLD PICTURE STILL HAS SHADOW)&quot;},{ &quot;id&quot;: &quot;19100630-217f-4c24-93bf-67fa14dba7f3&quot;, &quot;text&quot;: &quot;ABNORMAL BLOCK&quot;},{ &quot;id&quot;: &quot;040dfaaa-dd3e-440a-99eb-80fe0974d93c&quot;, &quot;text&quot;: &quot;NO DISPLAY&quot;},{ &quot;id&quot;: &quot;06bb0b8b-acc8-4d71-acbf-e154304a79c6&quot;, &quot;text&quot;: &quot;ABNORMAL COLOR&quot;},{ &quot;id&quot;: &quot;1e9c554d-aa31-4d53-a497-f22ac1b52cfa&quot;, &quot;text&quot;: &quot;DISPLAY UNIFORMITY&quot;} ]},{ &quot;id&quot;: &quot;5e25310b-7ffd-4d44-8a70-629c5dee3db7&quot;, &quot;text&quot;: &quot;PRINTER&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;cabbad4a-3136-4139-82a3-82f11651eecf&quot;, &quot;text&quot;: &quot;FAIL TO PRINT&quot;} ]},{ &quot;id&quot;: &quot;9d379347-707c-4e8f-b929-632d4fd9c9da&quot;, &quot;text&quot;: &quot;To be Defined by Technician&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;53fe9c33-67fb-4dee-a064-141d96e1f50b&quot;, &quot;text&quot;: &quot;To be Defined by Technician&quot;} ]},{ &quot;id&quot;: &quot;9733b1d7-e386-4dd6-b8d0-780598f77380&quot;, &quot;text&quot;: &quot;AUDIO&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;c0b6be2e-a9a9-4ac5-99c7-0d3a3b1e670c&quot;, &quot;text&quot;: &quot;NOT RECORDING&quot;},{ &quot;id&quot;: &quot;28c19c23-b4a3-45db-b8ed-1a75b2cf38d9&quot;, &quot;text&quot;: &quot;SOUND INTERNITTENT&quot;},{ &quot;id&quot;: &quot;723d8852-5405-4bf6-8e04-342ffd200bcb&quot;, &quot;text&quot;: &quot;ABNORMAL SOUND&quot;},{ &quot;id&quot;: &quot;617d90c9-6479-4914-94e4-4c81fb23f563&quot;, &quot;text&quot;: &quot;AUDIO DEVICE NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;8f84a285-bc3b-4c30-822d-88bcef740ddb&quot;, &quot;text&quot;: &quot;EARPHONE FAIL&quot;},{ &quot;id&quot;: &quot;fce0586a-38e4-4338-9619-a51cf5080a39&quot;, &quot;text&quot;: &quot;SOUND GARBLED/POOR QUALITY&quot;},{ &quot;id&quot;: &quot;d05b246b-041b-4b94-a2f8-bb9e775a5444&quot;, &quot;text&quot;: &quot;HEADSET ABNORMAL AUDIO&quot;},{ &quot;id&quot;: &quot;0de0326c-9f1d-438a-9710-c9478c71bba1&quot;, &quot;text&quot;: &quot;NO SOUND&quot;},{ &quot;id&quot;: &quot;f27ad15a-c1bd-4e23-b765-dacd2c85f993&quot;, &quot;text&quot;: &quot;ABNORMAL SOUND-PLAYED SPEED&quot;},{ &quot;id&quot;: &quot;afbc6b54-a950-49cd-aa81-f3c8d7273a1e&quot;, &quot;text&quot;: &quot;PLAYBACK NOISE FROM RECORDING&quot;} ]},{ &quot;id&quot;: &quot;b38d7ac9-57ea-454c-bf34-7c8c3681cfea&quot;, &quot;text&quot;: &quot;STORAGE&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;dbb687a4-4dce-4e9a-8ccf-01355ac5b16c&quot;, &quot;text&quot;: &quot;FDD WILL NOT READ/WRITE&quot;},{ &quot;id&quot;: &quot;c02ec840-c79e-4ac8-b98b-19a2c414200f&quot;, &quot;text&quot;: &quot;CANT RECOGNIZE STORAGE CARD&quot;},{ &quot;id&quot;: &quot;a058cf62-eed5-42c6-8711-1a753b23e534&quot;, &quot;text&quot;: &quot;HDD NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;8ee2941a-1c2d-45c4-9814-1cf9a3d77530&quot;, &quot;text&quot;: &quot;HDD DEFECTIVE SECTORS&quot;},{ &quot;id&quot;: &quot;bd76b4c7-1cf1-43c3-a338-1d243f388310&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;9496317b-fc62-425d-88b7-4d7855e511ce&quot;, &quot;text&quot;: &quot;HDD WILL NOT READ/WRITE&quot;},{ &quot;id&quot;: &quot;17537c61-dda3-4781-91ac-51eee4e4b07a&quot;, &quot;text&quot;: &quot;FDD WILL NOT BOOT&quot;},{ &quot;id&quot;: &quot;da5de642-2e06-4041-8c0b-5af2360d721d&quot;, &quot;text&quot;: &quot;HDD WILL NOT BOOT&quot;},{ &quot;id&quot;: &quot;31601641-6ecc-4fd3-9bc3-60fe1a0db702&quot;, &quot;text&quot;: &quot;FDD NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;5b662b61-13d4-4c01-aec3-6beffcde968d&quot;, &quot;text&quot;: &quot;FDD LED FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;5ba3ce10-2331-4ac0-83d8-77d8223152f8&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE NO POWER&quot;},{ &quot;id&quot;: &quot;214f7e58-7f7d-477c-88d6-78bf000e4037&quot;, &quot;text&quot;: &quot;HDD WILL NOT SPIN &quot;},{ &quot;id&quot;: &quot;e0ff3137-9921-4e63-8084-7a7820731452&quot;, &quot;text&quot;: &quot;STORAGE CARD SOCKET DAMAGE&quot;},{ &quot;id&quot;: &quot;155ef546-a043-4607-b67d-8b4914ee6bf1&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE LED FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;03416ea4-dc76-45db-b621-8ef708555f05&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE WILL NOT READ/WRITE&quot;},{ &quot;id&quot;: &quot;dff509ef-01f6-4360-87d0-948cb47b642a&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE WILL NOT BOOT&quot;},{ &quot;id&quot;: &quot;85e75969-7de7-4fe4-89da-96aaa599f099&quot;, &quot;text&quot;: &quot;SCSI CARD FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;8e119291-0d23-4f96-bf42-a1295ab9d4cc&quot;, &quot;text&quot;: &quot;STORAGE CARD READ/WRITE ERROR&quot;},{ &quot;id&quot;: &quot;57215f05-658e-4036-8a5d-ab18e229f059&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE SCRAPES THE DISKS&quot;},{ &quot;id&quot;: &quot;504e04fb-a7bb-4612-8b93-b8e8faabf8cd&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE CANT INSERT/EJECT&quot;},{ &quot;id&quot;: &quot;e7d91192-3074-4245-9358-bd7096716d50&quot;, &quot;text&quot;: &quot;FDD WILL NOT SPIN&quot;},{ &quot;id&quot;: &quot;c6f4c127-5fd4-40e1-aebc-c9d230f4b84a&quot;, &quot;text&quot;: &quot;CARDREADER FAILURE&quot;},{ &quot;id&quot;: &quot;bdda0b67-fd72-4e39-96b2-ca251ea51866&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE AUDIO ERROR&quot;},{ &quot;id&quot;: &quot;579d4771-b8b1-461c-b595-e1651d900a4d&quot;, &quot;text&quot;: &quot;FDD CANT INSERT/EJECT&quot;} ]},{ &quot;id&quot;: &quot;2fc8ffd7-52d6-49fc-8eaa-874e79333f50&quot;, &quot;text&quot;: &quot;Hardware conflicts or setup&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;904d042d-4f55-4231-a053-0244fb03d4bf&quot;, &quot;text&quot;: &quot;Joy Sticks&quot;},{ &quot;id&quot;: &quot;1e783485-f56b-4dc6-bef4-0cfc34b0012f&quot;, &quot;text&quot;: &quot;Media Readers&quot;},{ &quot;id&quot;: &quot;f5a708d4-2378-4b89-99c1-11129326a16f&quot;, &quot;text&quot;: &quot;Hard Drives&quot;},{ &quot;id&quot;: &quot;9c1e61fb-bbb3-47ab-a355-12fa1f58fa12&quot;, &quot;text&quot;: &quot;Tape Drives&quot;},{ &quot;id&quot;: &quot;ea82e8ca-1cbd-4e3b-bd66-4142ec327889&quot;, &quot;text&quot;: &quot;Floppy Drives&quot;},{ &quot;id&quot;: &quot;0c453bfa-906b-48c2-94a8-4badfc7af9cb&quot;, &quot;text&quot;: &quot;Bluetooth Adapters&quot;},{ &quot;id&quot;: &quot;a0cf2c54-ba3a-40b1-bb13-4e3df2195b62&quot;, &quot;text&quot;: &quot;Remote Controls&quot;},{ &quot;id&quot;: &quot;8d0525df-4994-4b6f-a6e0-56b79dd11651&quot;, &quot;text&quot;: &quot;Keyboards&quot;},{ &quot;id&quot;: &quot;f3394ed0-fb7a-4b21-b943-5f0ecd84887c&quot;, &quot;text&quot;: &quot;Audio and Sound&quot;},{ &quot;id&quot;: &quot;4f6b087c-5bfc-4f53-918f-6023bcf1fcc1&quot;, &quot;text&quot;: &quot;Broadband Modems&quot;},{ &quot;id&quot;: &quot;fe4f86a3-48e7-4e15-b8bd-6177e507117f&quot;, &quot;text&quot;: &quot;Routers HUBS or Access Points&quot;},{ &quot;id&quot;: &quot;be52c6fc-3f48-4046-b3c2-69107a6bab7d&quot;, &quot;text&quot;: &quot;Network Interface Cards&quot;},{ &quot;id&quot;: &quot;780a3173-f9f3-4475-8b38-6dfba27c95a0&quot;, &quot;text&quot;: &quot;USB and Serial Ports&quot;},{ &quot;id&quot;: &quot;91983a3d-4652-4858-87dd-6e3915690ac8&quot;, &quot;text&quot;: &quot;TV Tuners&quot;},{ &quot;id&quot;: &quot;008d4ae3-d854-4496-9081-8251ff5699da&quot;, &quot;text&quot;: &quot;Printers&quot;},{ &quot;id&quot;: &quot;8cb02466-7831-4077-9445-8ba2ed1aa5f7&quot;, &quot;text&quot;: &quot;Projectors&quot;},{ &quot;id&quot;: &quot;b5fc1c34-96a7-49ca-bdc2-94ee01f5406a&quot;, &quot;text&quot;: &quot;Scanners&quot;},{ &quot;id&quot;: &quot;f4bb1811-ac24-4cdb-942c-9edbc6e9d8f8&quot;, &quot;text&quot;: &quot;Video Capture&quot;},{ &quot;id&quot;: &quot;e65885ac-0019-4c2e-a1ca-9ee5f90f8983&quot;, &quot;text&quot;: &quot;Docking Station&quot;},{ &quot;id&quot;: &quot;ac9e5592-f500-4f91-8dcd-a85caebf625f&quot;, &quot;text&quot;: &quot;Optical Drives&quot;},{ &quot;id&quot;: &quot;881f5574-046e-4fdf-9bd9-a914058f01fa&quot;, &quot;text&quot;: &quot;Storage Interface Cards&quot;},{ &quot;id&quot;: &quot;6dc2b71c-363f-421c-a206-bf5eee0c88ac&quot;, &quot;text&quot;: &quot;Cameras&quot;},{ &quot;id&quot;: &quot;08f33c09-706b-4547-9916-c24f3ee67e16&quot;, &quot;text&quot;: &quot;LCD Panel Brightness&quot;},{ &quot;id&quot;: &quot;0d37a077-9fcd-4160-b7b1-c3e7a1011a1b&quot;, &quot;text&quot;: &quot;Fingerprint Reader&quot;},{ &quot;id&quot;: &quot;d8b34acf-78dc-4c34-98ae-c42d61ba11a8&quot;, &quot;text&quot;: &quot;Card Slots (pc-card and pumice)&quot;},{ &quot;id&quot;: &quot;432ede27-6d15-4a8f-bdbd-cb2b15a123f2&quot;, &quot;text&quot;: &quot;Mouse or Touchpad&quot;},{ &quot;id&quot;: &quot;892733d6-bcb9-452a-a287-e8c560b8225c&quot;, &quot;text&quot;: &quot;Dial up Modems&quot;},{ &quot;id&quot;: &quot;edab720b-ac6c-45b8-bee6-e9ffefd2ce55&quot;, &quot;text&quot;: &quot;Video Cards&quot;},{ &quot;id&quot;: &quot;05ced61b-e20a-41b0-9642-f2f516ae0339&quot;, &quot;text&quot;: &quot;1394 Controllers&quot;} ]},{ &quot;id&quot;: &quot;7d148da9-44b0-4ca6-b52b-91161588adf7&quot;, &quot;text&quot;: &quot;SYSTEM FUNCTION&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;2e3eada4-2d11-4a16-94dd-001f750384c6&quot;, &quot;text&quot;: &quot;FAN CANT SPIN&quot;},{ &quot;id&quot;: &quot;42e9379a-206d-4bfa-a386-0185ff42611c&quot;, &quot;text&quot;: &quot;SYSTEM HIBERNATION/STANDBY FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;7e2520e5-3ca3-4fea-97b3-026aef9fe874&quot;, &quot;text&quot;: &quot;SYSTEM AUTO SHUTDOWN&quot;},{ &quot;id&quot;: &quot;39efdca0-cc9c-4aef-841f-0fd47d7c365c&quot;, &quot;text&quot;: &quot;Faulty BIOS&quot;},{ &quot;id&quot;: &quot;acf0b9c2-6e94-420d-8eec-21bbbc1ef412&quot;, &quot;text&quot;: &quot;SYSTEM FAIL TO FLASH BIOS&quot;},{ &quot;id&quot;: &quot;91631599-3562-436d-914f-284bdd481fc2&quot;, &quot;text&quot;: &quot;MEMORY NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;e4666434-1b5e-4c78-bcde-3814f9aec738&quot;, &quot;text&quot;: &quot;SYSTEM CANT WAKE UP FROM HIBERNATION/STANDBY CONDITION&quot;},{ &quot;id&quot;: &quot;f6bd2a77-ffa2-42d5-b439-3db0d703b65c&quot;, &quot;text&quot;: &quot;LEAKAGE OF ELECTRICITY&quot;},{ &quot;id&quot;: &quot;1226a1ad-32d8-4073-84f3-3e8c4475ffbc&quot;, &quot;text&quot;: &quot;SYSTEM CANT BOOT&quot;},{ &quot;id&quot;: &quot;ba621be4-c739-429b-baa8-6031c9c88a5d&quot;, &quot;text&quot;: &quot;CANT POWER ON SYSTEM&quot;},{ &quot;id&quot;: &quot;eef7807e-e61d-4cb2-bafe-64c07ea21b48&quot;, &quot;text&quot;: &quot;CANT RESET SYSTEM&quot;},{ &quot;id&quot;: &quot;74b81981-0315-456f-9035-6732a8e2e1c4&quot;, &quot;text&quot;: &quot;SYSTEM CLOCK ERROR&quot;},{ &quot;id&quot;: &quot;6572f203-8081-480a-9f44-726d77fb9546&quot;, &quot;text&quot;: &quot;SYSTEM BURNT&quot;},{ &quot;id&quot;: &quot;6de3632b-3834-4b73-9489-758fc0cc4b82&quot;, &quot;text&quot;: &quot;Third party hardware error&quot;},{ &quot;id&quot;: &quot;85163ef5-951b-4863-b1f1-7c8ac86fe0af&quot;, &quot;text&quot;: &quot;MEMORY PARITY ERROR&quot;},{ &quot;id&quot;: &quot;33afc7e8-0785-4f2f-8d91-9d1cc08fad3d&quot;, &quot;text&quot;: &quot;MEMORY SIZE ERROR&quot;},{ &quot;id&quot;: &quot;31b53fcc-3f5b-4b8d-bd46-a0c693d3ede2&quot;, &quot;text&quot;: &quot;POWER SUPPLY BURNT&quot;},{ &quot;id&quot;: &quot;98ceb3c9-bec5-4930-8cda-a6ac0d23be81&quot;, &quot;text&quot;: &quot;LED INDICATOR FAILURE&quot;},{ &quot;id&quot;: &quot;d51d8511-94a8-4929-aaff-a7c43df6cfc5&quot;, &quot;text&quot;: &quot;BIOS CANT SAVE DATA&quot;},{ &quot;id&quot;: &quot;8fe07d68-885e-4dd7-9aa9-b629c83e5d73&quot;, &quot;text&quot;: &quot;SYSTEM UNSTABLE&quot;},{ &quot;id&quot;: &quot;8e691021-9f23-42d0-9b1b-bfd776d37fcd&quot;, &quot;text&quot;: &quot;ADAPTER DEAD&quot;},{ &quot;id&quot;: &quot;ab798cae-103d-4782-bf01-c9fe3217fa46&quot;, &quot;text&quot;: &quot;BLUE SCREEN&quot;},{ &quot;id&quot;: &quot;6e6d92a6-f61d-42d8-aca0-cfb71d8be50c&quot;, &quot;text&quot;: &quot;SYSTEM OVERHEATS&quot;},{ &quot;id&quot;: &quot;c8945db9-1a8c-4464-a8aa-dde74536bfb6&quot;, &quot;text&quot;: &quot;SYSTEM AUTO REBOOT&quot;},{ &quot;id&quot;: &quot;83fd1958-c0e6-4219-bb46-ef30f2bd4f80&quot;, &quot;text&quot;: &quot;TV CHANNEL SEARCH FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;375dff4e-1884-4f8b-9eb4-f21373c2f739&quot;, &quot;text&quot;: &quot;SYSTEM HANG UP&quot;} ]},{ &quot;id&quot;: &quot;527acc80-0fcc-4535-8954-95004dd82246&quot;, &quot;text&quot;: &quot;NOISY&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;5029117e-4287-4091-9007-1431dc1e7c69&quot;, &quot;text&quot;: &quot;SPEAKER NOISY&quot;},{ &quot;id&quot;: &quot;769e196a-784f-44d1-8220-211e8946120d&quot;, &quot;text&quot;: &quot;ADAPTER NOISY&quot;},{ &quot;id&quot;: &quot;9e97a792-f1d0-425a-9e2f-2fc55eb76d3e&quot;, &quot;text&quot;: &quot;LCD NOISY&quot;},{ &quot;id&quot;: &quot;5c67a02e-4dfd-4c73-80cc-43db20d9f47a&quot;, &quot;text&quot;: &quot;LOW FREQUENCY NOISY&quot;},{ &quot;id&quot;: &quot;2f39608f-9e77-4dc2-b0a5-542463833de6&quot;, &quot;text&quot;: &quot;FAN NOISY&quot;},{ &quot;id&quot;: &quot;a690cec2-1099-4149-b279-69257477a077&quot;, &quot;text&quot;: &quot;HDD NOISY&quot;},{ &quot;id&quot;: &quot;d4a372a1-1456-466a-8931-82fe739d3805&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE NOISY&quot;},{ &quot;id&quot;: &quot;9056e03a-b3df-420c-8cb5-8f17c1cf25be&quot;, &quot;text&quot;: &quot;HIGH FREQUENCY NOISY&quot;},{ &quot;id&quot;: &quot;50fac853-0af6-4d69-8369-baa4eaa966d6&quot;, &quot;text&quot;: &quot;FDD NOISY&quot;},{ &quot;id&quot;: &quot;9dd843ce-be81-42d9-af33-d51bfb3bfae8&quot;, &quot;text&quot;: &quot;POWER SUPPLY NOISY&quot;} ]},{ &quot;id&quot;: &quot;fd283159-3868-4ea2-90d9-950ce803d1dc&quot;, &quot;text&quot;: &quot;Diagnostic and Recovery Tools&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;ad910744-695f-4543-b419-18343de06249&quot;, &quot;text&quot;: &quot;System Restore&quot;},{ &quot;id&quot;: &quot;d30fa77e-1cfe-4de2-823d-1d05e504657f&quot;, &quot;text&quot;: &quot;Error Reporting&quot;},{ &quot;id&quot;: &quot;8bd74f1a-d44f-4a71-b372-1efc3783a24c&quot;, &quot;text&quot;: &quot;WinPE&quot;},{ &quot;id&quot;: &quot;29877292-9a41-4269-b172-2af0d03520b5&quot;, &quot;text&quot;: &quot;Boot Config Mgr&quot;},{ &quot;id&quot;: &quot;36c20ba5-aab3-4d81-9de8-45466797f63e&quot;, &quot;text&quot;: &quot;Live Meeting&quot;},{ &quot;id&quot;: &quot;8ce0d905-c5ba-4cae-afb3-4f00e656cb5a&quot;, &quot;text&quot;: &quot;Registry Editor&quot;},{ &quot;id&quot;: &quot;53072cce-3a6e-4a70-87fb-508a245e17ea&quot;, &quot;text&quot;: &quot;MSINFO&quot;},{ &quot;id&quot;: &quot;54630a6d-21e2-4ddf-b4a1-71de127209b0&quot;, &quot;text&quot;: &quot;DXDiag&quot;},{ &quot;id&quot;: &quot;bf67aff7-7081-4301-b78a-ada1598d9967&quot;, &quot;text&quot;: &quot;ASR(Automatic System Recovery)&quot;},{ &quot;id&quot;: &quot;5dee47d5-056d-4db1-874a-b949eca97f12&quot;, &quot;text&quot;: &quot;MSCONFIG&quot;},{ &quot;id&quot;: &quot;7b2030e4-ffe8-4e28-96fb-dc8f14bae4cd&quot;, &quot;text&quot;: &quot;SRT(System Recovery Troubleshooter)&quot;},{ &quot;id&quot;: &quot;cc9552bf-be15-4538-94ac-edeb59bad9d3&quot;, &quot;text&quot;: &quot;Help and Support Center&quot;},{ &quot;id&quot;: &quot;3eb6c526-fb33-410a-aa25-f880fdc49516&quot;, &quot;text&quot;: &quot;Recovery Console&quot;},{ &quot;id&quot;: &quot;b88b099c-af75-457f-b1a6-ff026db7b998&quot;, &quot;text&quot;: &quot;MS Memory Diagnostic&quot;} ]},{ &quot;id&quot;: &quot;0da96b0d-db04-4aa4-ab5b-97a04931a52c&quot;, &quot;text&quot;: &quot;MAINBOARD&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;18b7569d-3e94-47f7-a7ba-09e03276a84e&quot;, &quot;text&quot;: &quot;MAINBOARD MISSING PART&quot;},{ &quot;id&quot;: &quot;6f79e004-5118-4a9a-a43b-2f1c72d909a6&quot;, &quot;text&quot;: &quot;NO BOOT&quot;},{ &quot;id&quot;: &quot;3cddbfc7-c55e-4884-b61a-44157551f713&quot;, &quot;text&quot;: &quot;MAINBOARD SYSTEM UNSTABLE&quot;},{ &quot;id&quot;: &quot;47ba5128-e552-449e-9cc5-47cedc08f5b0&quot;, &quot;text&quot;: &quot;MAINBOARD HIBERNATION/STANDBY FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;7ecdbb98-48e6-4f11-88a0-6614ba674e32&quot;, &quot;text&quot;: &quot;MAINBOARD DISK READ/WRITE FAILURE&quot;},{ &quot;id&quot;: &quot;947d38ff-1248-4e01-a30f-7043edc54266&quot;, &quot;text&quot;: &quot;MAINBOARD AUTO SHUTDOWN&quot;},{ &quot;id&quot;: &quot;ff44d5e0-6513-4fbd-aa69-74d9d0cd1693&quot;, &quot;text&quot;: &quot;RUSTY M/B&quot;},{ &quot;id&quot;: &quot;689c7bb4-e443-4405-930c-7bb8035b1add&quot;, &quot;text&quot;: &quot;M/B CANT WAKE UP FROM HIBERNATION/STANDBY CONDITION&quot;},{ &quot;id&quot;: &quot;53a73768-bbdb-4931-9de6-9058509fb966&quot;, &quot;text&quot;: &quot;MAINBOARD FAIL TO FLASH BIOS&quot;},{ &quot;id&quot;: &quot;8ca747e2-c521-4580-8a1a-a73cbee9e228&quot;, &quot;text&quot;: &quot;ONBOARD VGA FAIL&quot;},{ &quot;id&quot;: &quot;3c0aae81-d5ce-4b89-bec7-abab41d1afa2&quot;, &quot;text&quot;: &quot;PORT NOT WORKING&quot;},{ &quot;id&quot;: &quot;90b37948-7bee-44c4-8468-abfd80514474&quot;, &quot;text&quot;: &quot;MAINBOARD CONNECTOR DAMAGED&quot;},{ &quot;id&quot;: &quot;64c7e260-4863-4473-9262-bca92f36871c&quot;, &quot;text&quot;: &quot;ONBOARD VGA DISPLAY GARBAGE&quot;},{ &quot;id&quot;: &quot;214a321b-c543-42b8-baba-bd65e035bd19&quot;, &quot;text&quot;: &quot;MAINBOARD SYSTEM BURNT&quot;},{ &quot;id&quot;: &quot;bef0ca53-f897-47db-9ca0-d4aee472f8d2&quot;, &quot;text&quot;: &quot;MAINBOARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;2d6ac17f-ee4c-4cbf-a53d-db35add60a10&quot;, &quot;text&quot;: &quot;MAINBOARD SYSTEM HANG UP&quot;},{ &quot;id&quot;: &quot;ef15d3fe-7d22-440f-ba7a-e07b39087180&quot;, &quot;text&quot;: &quot;NO POWER&quot;},{ &quot;id&quot;: &quot;9576cd02-534e-43f7-9aa6-e533fbfb5f5a&quot;, &quot;text&quot;: &quot;M/B CAPACITANCE EXPLODES&quot;} ]},{ &quot;id&quot;: &quot;f8109b06-d85b-40c4-93b2-a346a69418a9&quot;, &quot;text&quot;: &quot;Power Manager&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;94e4c2b2-4bd8-45c4-8798-15a6cf13c3df&quot;, &quot;text&quot;: &quot;VU32&quot;},{ &quot;id&quot;: &quot;b64eb733-3641-49e6-a5a7-60c5a8663366&quot;, &quot;text&quot;: &quot;VB64&quot;},{ &quot;id&quot;: &quot;cb02ebdc-db0e-4e97-9860-612ef26ad968&quot;, &quot;text&quot;: &quot;VU64&quot;},{ &quot;id&quot;: &quot;602ec4a9-638d-4f8d-8ef6-bf2a181b8653&quot;, &quot;text&quot;: &quot;Battery Alert&quot;},{ &quot;id&quot;: &quot;a55d2a28-5171-4f59-81f3-bfdec99aa507&quot;, &quot;text&quot;: &quot;VHP32&quot;},{ &quot;id&quot;: &quot;b24fe335-16cc-439f-962c-e983d1c05363&quot;, &quot;text&quot;: &quot;VB32&quot;},{ &quot;id&quot;: &quot;ba2791c1-64d1-4ff7-b4f4-f916c632cd8b&quot;, &quot;text&quot;: &quot;VHP64&quot;} ]},{ &quot;id&quot;: &quot;c007b43d-1f17-4772-bbec-ba36df70dfb8&quot;, &quot;text&quot;: &quot;SOFTWARE/ CUSTOMER BEHAVIOR&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;f24762b3-5eab-4536-9abe-0c81b7faa185&quot;, &quot;text&quot;: &quot;ACTIVESYNC FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;21104e64-b263-4d8e-897b-0fc417659753&quot;, &quot;text&quot;: &quot;INQUIRY DRIVER INSTALL PROCEDURE&quot;},{ &quot;id&quot;: &quot;0cab7500-9c71-4b87-886b-1055f21e9494&quot;, &quot;text&quot;: &quot;BIOS PASSWORD LOCKED&quot;},{ &quot;id&quot;: &quot;c98fa79c-0ecd-41a3-be5d-161cc5b950d3&quot;, &quot;text&quot;: &quot;INQUIRY WINDOWS 7 UPGRADE&quot;},{ &quot;id&quot;: &quot;0ec779b8-bd02-4603-97d6-22db711572ef&quot;, &quot;text&quot;: &quot;THIRD PARTY SOFTWARE ISSUE&quot;},{ &quot;id&quot;: &quot;151533a7-7621-4bb4-9956-34975350ae31&quot;, &quot;text&quot;: &quot;FAIL TO UPDATE DEVICE DRIVER&quot;},{ &quot;id&quot;: &quot;bdf1f8d0-4905-4862-b2b1-3f6fb4fb87c3&quot;, &quot;text&quot;: &quot;PASSWORD FORGOTTEN&quot;},{ &quot;id&quot;: &quot;a04ba9d8-a9c8-489e-b615-48dc48e032a2&quot;, &quot;text&quot;: &quot;EMPOWERING FUNCTION NOT WORKING&quot;},{ &quot;id&quot;: &quot;65eaabd6-fadd-43b4-9e88-5781ea22d9e8&quot;, &quot;text&quot;: &quot;FAIL TO SETUP OS&quot;},{ &quot;id&quot;: &quot;246c08e2-d94f-4af6-b9c1-6aeae20a56b5&quot;, &quot;text&quot;: &quot;SYSTEM GETS VIRUS&quot;},{ &quot;id&quot;: &quot;106f2edc-6ee6-4c1a-a4f5-74f1f74a5e3a&quot;, &quot;text&quot;: &quot;CD MEDIA BROKEN&quot;},{ &quot;id&quot;: &quot;0bd793e3-e40a-4d14-92e4-7f6ed64f25e0&quot;, &quot;text&quot;: &quot;INQUIRY PRODUCT SPEC&quot;},{ &quot;id&quot;: &quot;c03a0326-2884-4eb8-9eb6-8862285ca1f3&quot;, &quot;text&quot;: &quot;FAIL TO UPDATE DEVICE F/W&quot;},{ &quot;id&quot;: &quot;623c7e92-fa26-4d5f-9ea7-9a582d7cccd6&quot;, &quot;text&quot;: &quot;INQUIRY RECOVERY PROCEDURE&quot;},{ &quot;id&quot;: &quot;ab3b0366-0110-43be-8b19-c1a67bfe4137&quot;, &quot;text&quot;: &quot;CUSTOMER ASKS CD-MEDIA&quot;},{ &quot;id&quot;: &quot;15d8118e-8649-4477-a1ca-c682f50070ec&quot;, &quot;text&quot;: &quot;KB LIQUID POLLUTION&quot;},{ &quot;id&quot;: &quot;c08e1139-f910-4a6d-a623-c7b0c93a5b22&quot;, &quot;text&quot;: &quot;CUST. MISSING RCVD MEDIA&quot;},{ &quot;id&quot;: &quot;7c286828-d4ca-4c36-b000-caddd0a7eaab&quot;, &quot;text&quot;: &quot;SYSTEM LIQUID POLLUTION&quot;},{ &quot;id&quot;: &quot;8ad75fd0-8913-440c-a277-d04a8a890bac&quot;, &quot;text&quot;: &quot;FAIL TO UPDATE AP&quot;},{ &quot;id&quot;: &quot;a3712fc7-4209-409a-b6d6-d3e0450c10c1&quot;, &quot;text&quot;: &quot;OS VERSION ERROR&quot;},{ &quot;id&quot;: &quot;3534c031-d111-4fe3-8b97-f28f02d06242&quot;, &quot;text&quot;: &quot;CUSTOMER ASKS UPGRADE&quot;},{ &quot;id&quot;: &quot;c591c46b-d326-4e13-b49f-ff40d57de9ac&quot;, &quot;text&quot;: &quot;CUST. MISSING CD MEDIA&quot;} ]},{ &quot;id&quot;: &quot;e90aaf29-2c6b-465b-ac93-c7d009adb71f&quot;, &quot;text&quot;: &quot;Applications 3rd party&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;561a05aa-3cb3-48e1-80fa-d4d2c25f2435&quot;, &quot;text&quot;: &quot;Multimedia Software (players, recorders, display, editors)&quot;} ]},{ &quot;id&quot;: &quot;cd12b346-49d7-44ba-8178-d698ad55db2c&quot;, &quot;text&quot;: &quot;BATTERY AND POWER SUPPLY&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;4d6f8535-8973-476b-8b44-082ff8e9f0f0&quot;, &quot;text&quot;: &quot;ADAPTER DEAD&quot;} ]},{ &quot;id&quot;: &quot;f0aa8da8-2e24-41d2-b21d-e60627829ca4&quot;, &quot;text&quot;: &quot;EMPOWERING AP&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;a02e4358-db8c-4dd2-adfc-01e7d3d9f0a5&quot;, &quot;text&quot;: &quot;E-OPENING&quot;},{ &quot;id&quot;: &quot;6af0f9a7-883f-4370-b35f-03a388fefa5a&quot;, &quot;text&quot;: &quot;E-RECOVERY CAN NOT CREATE CD/DVD&quot;},{ &quot;id&quot;: &quot;289ff585-9f44-485f-ba48-101c43b4628f&quot;, &quot;text&quot;: &quot;eSETTINGS MANAGEMENT&quot;},{ &quot;id&quot;: &quot;c295f312-9a0c-4890-8339-1ca1262a474b&quot;, &quot;text&quot;: &quot;E-COLOR&quot;},{ &quot;id&quot;: &quot;eb38cd57-28e4-4881-b626-2d473fba2be6&quot;, &quot;text&quot;: &quot;E-PERFORMANCE&quot;},{ &quot;id&quot;: &quot;d144b349-bb0b-45c3-bddb-3c64d6587110&quot;, &quot;text&quot;: &quot;ORBICAM&quot;},{ &quot;id&quot;: &quot;aaf804eb-af1d-49ea-9611-53b6b54926a1&quot;, &quot;text&quot;: &quot;E-MODE&quot;},{ &quot;id&quot;: &quot;7b51c51a-d3f6-4f77-a004-5a1222497442&quot;, &quot;text&quot;: &quot;GRID VISTA&quot;},{ &quot;id&quot;: &quot;4f723f63-3ea0-4e59-866f-61f47f4ade38&quot;, &quot;text&quot;: &quot;E-DATA SECURITY&quot;},{ &quot;id&quot;: &quot;8be28313-c4b2-4d93-9e7e-826ff44c359a&quot;, &quot;text&quot;: &quot;E-LOCK&quot;},{ &quot;id&quot;: &quot;ed4946b5-9b5a-4efb-876c-8310c0ec86ba&quot;, &quot;text&quot;: &quot;E-RECOVERY CAN NOT ACCEPT THE PASSWORD&quot;},{ &quot;id&quot;: &quot;cffadaac-9de6-4dc9-b795-9eac0b640dea&quot;, &quot;text&quot;: &quot;ESETTINGS DOES NOT ACCEPT THE PASSWORD&quot;},{ &quot;id&quot;: &quot;1ab5f1d4-f674-4dbb-99fc-a074cd9587e8&quot;, &quot;text&quot;: &quot;E-RECOVERY CD/DVD BURNED FAILURE&quot;},{ &quot;id&quot;: &quot;ece7fef3-45d6-40ce-a42f-a9275106ff87&quot;, &quot;text&quot;: &quot;E-CHANNEL&quot;},{ &quot;id&quot;: &quot;cbf4ded0-73b7-480a-bd38-ae2aa9960e91&quot;, &quot;text&quot;: &quot;E-RECOVERY&quot;},{ &quot;id&quot;: &quot;13a259de-7119-437a-af77-cb0d9e4155ab&quot;, &quot;text&quot;: &quot;E-TIMER&quot;},{ &quot;id&quot;: &quot;6022d2b2-f6cb-4cdd-b9cb-ed98c06f7413&quot;, &quot;text&quot;: &quot;E-RECOVERY DOES NOT BOOT ALT+F10&quot;},{ &quot;id&quot;: &quot;11d481df-2d03-4e82-9918-fa1b9476596c&quot;, &quot;text&quot;: &quot;E-DISPLAY&quot;},{ &quot;id&quot;: &quot;f1ec68ee-5fcd-4d8f-8254-ffb4e55c20ee&quot;, &quot;text&quot;: &quot;E-VIEW&quot;} ]},{ &quot;id&quot;: &quot;78908173-ce37-4651-92ef-f5e1d16185d1&quot;, &quot;text&quot;: &quot;INPUT DEVICE&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;9079833c-d3ee-461d-8a0c-0bf3f27887d7&quot;, &quot;text&quot;: &quot;KB NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;18902fb8-e2c9-4a86-8371-18b23fca194c&quot;, &quot;text&quot;: &quot;POINTING DEVICE FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;17821b56-56b7-4b2f-8e01-2f2155e63c0d&quot;, &quot;text&quot;: &quot;KEYCAP BROKEN&quot;},{ &quot;id&quot;: &quot;60d8e27b-fed6-4531-8072-417dca66b7b2&quot;, &quot;text&quot;: &quot;CINE-DASH MEDIA CONSOLE&quot;},{ &quot;id&quot;: &quot;db1a6df9-3c4b-438b-86d1-44dcbcdf5d5e&quot;, &quot;text&quot;: &quot;KB FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;d788baf8-fd3f-4188-a64a-70f907f6f393&quot;, &quot;text&quot;: &quot;POINTING DEVICE NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;45813b05-8aa0-42f8-bc71-7c4a044aff11&quot;, &quot;text&quot;: &quot;KEY PRINTING FADDING&quot;},{ &quot;id&quot;: &quot;bcf267e7-8535-479a-8940-9a6a7fca1a95&quot;, &quot;text&quot;: &quot;KB DEAD&quot;},{ &quot;id&quot;: &quot;9fb9567d-02d2-468d-8729-ae1d77e366b6&quot;, &quot;text&quot;: &quot;POINTING DEVICE NOT SENSITIVE&quot;},{ &quot;id&quot;: &quot;2edababd-f0bf-4c45-9a0c-ae5e67ca441a&quot;, &quot;text&quot;: &quot;KB STUCK KEY&quot;},{ &quot;id&quot;: &quot;4cae5739-c297-4432-a2ce-b1610f4f7ba0&quot;, &quot;text&quot;: &quot;WIRELESS MOUSE/KB CANT CONNECT TO SYSTEM&quot;},{ &quot;id&quot;: &quot;7907224e-f0f6-4831-b122-bf5409c39ea0&quot;, &quot;text&quot;: &quot;KEYCAP MISSING&quot;} ]},{ &quot;id&quot;: &quot;e0760348-f945-4925-9c18-fa73412439c3&quot;, &quot;text&quot;: &quot;EXTERNAL &amp; SYNC. FUNCTION &amp; PORT&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;049b787b-dab6-4785-87f7-0dbbe2699d2a&quot;, &quot;text&quot;: &quot;PC CARD FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;b9962a8f-2317-4412-b979-1320c27e0e2e&quot;, &quot;text&quot;: &quot;PC CARD NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;27ef39c2-d144-4e03-8253-135b9dbf3078&quot;, &quot;text&quot;: &quot;PARALLEL PORT FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;5f6a872c-04c2-4545-9387-235aba74d1d0&quot;, &quot;text&quot;: &quot;RS232 SYNC. ERROR&quot;},{ &quot;id&quot;: &quot;0781ea68-02c0-4d73-905d-367992bf2191&quot;, &quot;text&quot;: &quot;VIDEO NOT SYNC (PICTURE CHANGE BUT OLD PICTURE STILL HAS SHADOW)&quot;},{ &quot;id&quot;: &quot;4beea9f5-d386-4c7d-bc7e-4caca9fb2b16&quot;, &quot;text&quot;: &quot;HDMI Failure&quot;},{ &quot;id&quot;: &quot;17deeeef-f4d0-40a9-9c2a-5bd306dced28&quot;, &quot;text&quot;: &quot;FIR FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;a22df84d-1439-4cfd-afe5-5d415ef553bb&quot;, &quot;text&quot;: &quot;GAME PORT FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;1fb9a23a-28ac-42d8-ac64-6af078edbd83&quot;, &quot;text&quot;: &quot;PCI EXPRESS FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;6f845af9-782a-4a43-b4e2-8010adcb66ba&quot;, &quot;text&quot;: &quot;PS2 PORT FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;29827772-a999-4667-97d3-8f7b1bf36241&quot;, &quot;text&quot;: &quot;1394 FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;cad54bec-3919-4c3a-8db7-a5f762ef007c&quot;, &quot;text&quot;: &quot;ABNORMAL OUTPUT SIGNAL&quot;},{ &quot;id&quot;: &quot;58d091e4-1822-4af0-8a39-ae71fb57b18b&quot;, &quot;text&quot;: &quot;REMOTE CONTROL FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;3326ae09-d923-4470-8c07-b914fcf5a9db&quot;, &quot;text&quot;: &quot;USB FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;ba3aea7b-bc0b-432f-b54e-da11439fd088&quot;, &quot;text&quot;: &quot;S-Video Failure&quot;},{ &quot;id&quot;: &quot;0d2295cf-9f9f-4e88-bb4b-e606d637c622&quot;, &quot;text&quot;: &quot;DVI Failure&quot;},{ &quot;id&quot;: &quot;31bf0ab1-c8f1-40fb-9860-f6e2c605c245&quot;, &quot;text&quot;: &quot;SERIAL PORT FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;01db7727-07b9-408b-920c-fa97ac8f8a43&quot;, &quot;text&quot;: &quot;IR SYNC. ERROR&quot;} ]} ]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:RecallsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:RecallsHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:cityHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:cityHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerInfoHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerInfoHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ShipToAddressHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ShipToAddressHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:GenerateSNoCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:GenerateSNoCheck</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtEmailCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtEmailCheck</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboWarrantyClassification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboWarrantyClassification</stringProp>
                  <stringProp name="Argument.value">RTOOW</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressvalidationReqHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressvalidationReqHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtAddress4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtAddress4</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtVATCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtVATCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AHDResourceIDhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AHDResourceIDhidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:VerificationNotesforSave" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:VerificationNotesforSave</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ReasonsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ReasonsHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:cboCountryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:cboCountryHidden</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToCityTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToCityTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtFAX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtFAX</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OOWCaseStatusHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OOWCaseStatusHidden</stringProp>
                  <stringProp name="Argument.value">S1,S3,S7,S6N,S10,S10N,S15,S18,S2,S6,S7N,S8,S8N,S9,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ProvinceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ProvinceHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtCompanyName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtCompanyName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FOSCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FOSCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AppoinmentDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AppoinmentDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PurchaseDateChangedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PurchaseDateChangedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressVerificationHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressVerificationHiddenField</stringProp>
                  <stringProp name="Argument.value">-1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboProductLine" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboProductLine</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShowMoreInfoTab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShowMoreInfoTab</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:HDADBNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:HDADBNameHidden</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IdsiteHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IdsiteHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ConfiguredCaseType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ConfiguredCaseType</stringProp>
                  <stringProp name="Argument.value">,1,T14S,T25N,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ASPTextHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ASPTextHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:CountyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:CountyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShipToAddHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShipToAddHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:PickupCarrierSelectedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:PickupCarrierSelectedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressValidatorResultHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressValidatorResultHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:faxHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:faxHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactIDhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactIDhidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorResultEditModeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorResultEditModeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ASPHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ASPHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DeletedFailureCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DeletedFailureCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MinMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MinMobileNo</stringProp>
                  <stringProp name="Argument.value">9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:CheckCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:CheckCountry</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:OldPartNumberHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:OldPartNumberHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:Custinfochanged" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:Custinfochanged</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ProblemTextHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ProblemTextHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FastSystemURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FastSystemURLHidden</stringProp>
                  <stringProp name="Argument.value">http://whatsin-uat.acer.com.tw/Internal/pages/WhatsInLink.aspx?</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ISTransferredHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ISTransferredHidden</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressvalidationReqHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressvalidationReqHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ISCaseTypeChangeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ISCaseTypeChangeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerSourceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerSourceHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToZipCodeTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToZipCodeTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AddressVerificationStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AddressVerificationStatus</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactIsSendEmailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactIsSendEmailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value">SR_CASE$ucCustomer$txtID$LookupButton</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseAssignToHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseAssignToHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OldPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OldPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPRODLINE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPRODLINE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PartNumberHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PartNumberHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:MaxMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:MaxMobileNo</stringProp>
                  <stringProp name="Argument.value">14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:initialformdata" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:initialformdata</stringProp>
                  <stringProp name="Argument.value">{&quot;IDTicket&quot;:&quot;0&quot;,&quot;Price&quot;:0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboRepairCenter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboRepairCenter</stringProp>
                  <stringProp name="Argument.value">83405F80-2D3A-4697-9A74-B4AAF5F7F6F9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressInfoChangedHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressInfoChangedHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SpareWarrantyExpHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SpareWarrantyExpHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ProdLineDefTicketTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ProdLineDefTicketTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ShipmentCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ShipmentCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value">T25N,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formName</stringProp>
                  <stringProp name="Argument.value">CaseCreationMoreInfo</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:HDADBName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:HDADBName</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerRefFlag" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerRefFlag</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressValidatorHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressValidatorHidden</stringProp>
                  <stringProp name="Argument.value">ADDRESSVALIDATION</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SNAvailableHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SNAvailableHidden</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressValidatorHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressValidatorHidden</stringProp>
                  <stringProp name="Argument.value">ADDRESSVALIDATION</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PreviousPurchaseDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PreviousPurchaseDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ZipcodeurlHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ZipcodeurlHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipmentAddressIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipmentAddressIDHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RecallsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RecallsHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendProductlines" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendProductlines</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DefaultCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DefaultCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:TicketTypeChangedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:TicketTypeChangedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PNHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PNHidden</stringProp>
                  <stringProp name="Argument.value">[object Object]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_Destination" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_Destination</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:NewPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:NewPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ShippingCarrierHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ShippingCarrierHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ResourceChangeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ResourceChangeHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressPOBOXDataHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressPOBOXDataHidden</stringProp>
                  <stringProp name="Argument.value">POB,APO,FPO,POST OFFICE BOX,POBOX,PO BOX,P.O. BOX,P.O.BOX</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PHASEOUTDATEHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PHASEOUTDATEHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtMobilePhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtMobilePhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtPN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtPN</stringProp>
                  <stringProp name="Argument.value">[object Object]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ProductLineChangedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ProductLineChangedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:OnsiteHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:OnsiteHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SpareOnlyWarrantyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SpareOnlyWarrantyHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AHDRepairCenterHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AHDRepairCenterHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ResourceField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ResourceField</stringProp>
                  <stringProp name="Argument.value">Szopinska Paulina</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AlternateCustomerIDTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AlternateCustomerIDTextBox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtPostalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtPostalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerIDHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:DateFormatHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:DateFormatHidden</stringProp>
                  <stringProp name="Argument.value">MM/dd/yyyy</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressValidatorWebAPIURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressValidatorWebAPIURLHidden</stringProp>
                  <stringProp name="Argument.value">http://sertec360-uat.emea.intra.acer.com/AddressValidator/api/AddressValidator/ValidateAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISAFSExistHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISAFSExistHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">AF7653EC</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FastSystemuname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FastSystemuname</stringProp>
                  <stringProp name="Argument.value">uHKBfUfZ1yx95NyC3CusyPUY1g9w1Y/9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ProductionDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ProductionDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ClosedCaseHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ClosedCaseHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToCountryTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToCountryTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeListBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeListBox</stringProp>
                  <stringProp name="Argument.value">77540958-1d3a-4420-8cfa-28eb318b4c3b</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressVerificationCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressVerificationCheck</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:h_IDCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:h_IDCountry</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISContactChangehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISContactChangehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDSWAPREQUEST" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDSWAPREQUEST</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboTicketStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboTicketStatus</stringProp>
                  <stringProp name="Argument.value">S1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressPOBOXValidationRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressPOBOXValidationRequired</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:StateDropDownList" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:StateDropDownList</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ParentIDSiteTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ParentIDSiteTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IDCustomerhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IDCustomerhidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPURDATECHANGE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPURDATECHANGE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PartModelHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PartModelHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyClassificationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyClassificationHidden</stringProp>
                  <stringProp name="Argument.value">Out of Warranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:MinMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:MinMobileNo</stringProp>
                  <stringProp name="Argument.value">9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:DealerTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:DealerTextBox</stringProp>
                  <stringProp name="Argument.value">Others - Germany</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ProductDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ProductDateHidden</stringProp>
                  <stringProp name="Argument.value">12:00:00 AM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FastSystempwd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FastSystempwd</stringProp>
                  <stringProp name="Argument.value">e+eLpQ78HoKOczNY7h60VA==</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ReasonCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ReasonCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value">,T19C,T20C,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SessionHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SessionHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:txtRegion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:txtRegion</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtAppointmentDateNew" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtAppointmentDateNew</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:HDADBHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:HDADBHidden</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ShipToAddressValidatorNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ShipToAddressValidatorNameHidden</stringProp>
                  <stringProp name="Argument.value">ADDRESSVALIDATION</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:AssetValidateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:AssetValidateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressValidatorWebAPIURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressValidatorWebAPIURLHidden</stringProp>
                  <stringProp name="Argument.value">http://sertec360-uat.emea.intra.acer.com/AddressValidator/api/AddressValidator/ValidateAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:txtID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:txtID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtID</stringProp>
                  <stringProp name="Argument.value">C1244DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SNHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SNHidden</stringProp>
                  <stringProp name="Argument.value">${SNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IDCustomerSubTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IDCustomerSubTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:RepairCaseStatusHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:RepairCaseStatusHidden</stringProp>
                  <stringProp name="Argument.value">S1,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AddressVerifyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AddressVerifyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtIMEI1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtIMEI1</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:EditCaseWarrantyClassificationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:EditCaseWarrantyClassificationHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:Instr_CaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:Instr_CaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtIMEI2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtIMEI2</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:cboAvailabilityTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:cboAvailabilityTo</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDNOPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDNOPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:EmailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:EmailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:StateDropdownvaluehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:StateDropdownvaluehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShipmentAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShipmentAddress</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseTypeFilterHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseTypeFilterHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignedResourceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignedResourceHidden</stringProp>
                  <stringProp name="Argument.value">P1209Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:EMailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:EMailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerMailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerMailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPRODLINECHANGE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPRODLINECHANGE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToCustomerTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToCustomerTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RefNumberTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RefNumberTextBox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:LocationIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:LocationIDHidden</stringProp>
                  <stringProp name="Argument.value">83405f80-2d3a-4697-9a74-b4aaf5f7f6f9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:CurrentDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:CurrentDateHidden</stringProp>
                  <stringProp name="Argument.value">6/4/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RequestCreatedDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RequestCreatedDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:FedEXHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:FedEXHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:SameAsBillingCheckBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:SameAsBillingCheckBox</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ValidatePhaseOutDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ValidatePhaseOutDateHidden</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorWebAPIURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorWebAPIURLHidden</stringProp>
                  <stringProp name="Argument.value">http://sertec360-uat.emea.intra.acer.com/AddressValidator/api/AddressValidator/ValidateAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:WarrExpiryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:WarrExpiryHidden</stringProp>
                  <stringProp name="Argument.value">1/1/0001 12:00:00 AM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressvalidationReqHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressvalidationReqHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendReasonHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendReasonHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CopySymptomtoProblem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CopySymptomtoProblem</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:TicketClosedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:TicketClosedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:GSNAssetSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:GSNAssetSource</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SalesOrginCountryDownList" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SalesOrginCountryDownList</stringProp>
                  <stringProp name="Argument.value">AFG</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:AllowOOWCaseCreationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:AllowOOWCaseCreationHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtAddress</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CountryField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CountryField</stringProp>
                  <stringProp name="Argument.value">Germany [49]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DefaultShippingFreightID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DefaultShippingFreightID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ShipmentCarrierSelectedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ShipmentCarrierSelectedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyExp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyExp</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RepairTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RepairTypeHidden</stringProp>
                  <stringProp name="Argument.value">RTISW</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ResourceHiddenValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ResourceHiddenValue</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:DealerIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:DealerIDHidden</stringProp>
                  <stringProp name="Argument.value">10054</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressValidatorResultHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressValidatorResultHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ReasonCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ReasonCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISActiveHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISActiveHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AgentLocaleHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AgentLocaleHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:OnSiteWarrantyExpHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:OnSiteWarrantyExpHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AutoAssignIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AutoAssignIDHidden</stringProp>
                  <stringProp name="Argument.value">P1209Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AgentRoleHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AgentRoleHidden</stringProp>
                  <stringProp name="Argument.value">SenCCR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MobileCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MobileCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/PageProxy.aspx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://sertec360-uat.emea.intra.acer.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">24162</stringProp>
            </ConstantTimer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ViewState3</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; id=&quot;__VIEWSTATE&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">ViewState3NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetSNLength" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetSNLength</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetSNLength" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetSNLength</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Pages/Ajax/PATAjaxCalls.aspx?Type=CalculateWarranty&amp;IDWarranty=G00&amp;PurchaseDate=06/04/2020&amp;XtwIdwarranty=&amp;IDAsset=H16340DE" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">CalculateWarranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PurchaseDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PurchaseDate</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDWarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDWarranty</stringProp>
                  <stringProp name="Argument.value">G00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="XtwIdwarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">XtwIdwarranty</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDAsset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDAsset</stringProp>
                  <stringProp name="Argument.value">H16340DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Pages/Ajax/PATAjaxCalls.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Pages/Ajax/PATAjaxCalls.aspx?Type=CalculateLabourandSpareWarranty&amp;IDWarranty=G00&amp;PurchaseDate=06/04/2020&amp;SerialNumber=544037AL011908359B58416B27&amp;XtwIdwarranty=" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">CalculateLabourandSpareWarranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SerialNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">SerialNumber</stringProp>
                  <stringProp name="Argument.value">${SNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PurchaseDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PurchaseDate</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDWarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDWarranty</stringProp>
                  <stringProp name="Argument.value">G00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="XtwIdwarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">XtwIdwarranty</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Pages/Ajax/PATAjaxCalls.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Pages/Ajax/AjaxCalls.aspx?Type=CheckSpareWarranty&amp;IDWarranty=G00&amp;PurchaseDate=06/04/2020" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">CheckSpareWarranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PurchaseDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PurchaseDate</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IDWarranty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IDWarranty</stringProp>
                  <stringProp name="Argument.value">G00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Pages/Ajax/AjaxCalls.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetRepairTypeData" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;Warrantytype&apos;:&apos;Out Of Warranty&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetRepairTypeData</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Services/Ajax.asmx/GetPickupCarrier" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;IDLocation&apos;:&apos;83405F80-2D3A-4697-9A74-B4AAF5F7F6F9&apos;,&apos;isPickup&apos;:&apos;true&apos;,&apos;ShipTypeWithCarrier&apos;:&apos;true&apos; }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Services/Ajax.asmx/GetPickupCarrier</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml, text/xml, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Services/Ajax.asmx/GetDefaultPickupCarriershiptype" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;IDLocation&apos;:&apos;83405F80-2D3A-4697-9A74-B4AAF5F7F6F9&apos;,&apos;Country&apos;:&apos;DE&apos;,&apos;State&apos;:&apos;&apos; }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Services/Ajax.asmx/GetDefaultPickupCarriershiptype</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Pages/Ajax/PATAjaxCalls.aspx?Caller=CalculateCasePriority&amp;ProductLine=C22S&amp;CaseType=T4C&amp;Customertype=CLI&amp;CustomerCountry=DE&amp;WarrantyType=G00&amp;Redirect=0.016050579228068074" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CustomerCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">CustomerCountry</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="WarrantyType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">WarrantyType</stringProp>
                  <stringProp name="Argument.value">G00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Caller" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Caller</stringProp>
                  <stringProp name="Argument.value">CalculateCasePriority</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="CaseType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">CaseType</stringProp>
                  <stringProp name="Argument.value">T4C</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Redirect" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Redirect</stringProp>
                  <stringProp name="Argument.value">0.016050579228068074</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Customertype" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Customertype</stringProp>
                  <stringProp name="Argument.value">CLI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ProductLine" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ProductLine</stringProp>
                  <stringProp name="Argument.value">C22S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Pages/Ajax/PATAjaxCalls.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CaseSave" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/Services/Ajax.asmx/CheckAddressIsExists" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&apos;SName&apos;:&apos;,ezÃ¶lKhplaR, scrambledby@apm.com&apos;,&apos;IDSite&apos;:&apos;C1244DE&apos;,&apos;IDAddress&apos;:&apos;bb8b01e3-cb63-4736-baac-5605211628e8&apos;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/Services/Ajax.asmx/CheckAddressIsExists</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/PageProxy.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="SR_CASE:CaseModeHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CaseModeHiddenField</stringProp>
                  <stringProp name="Argument.value">Normal</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToSNTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToSNTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerPOBOXDataHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerPOBOXDataHidden</stringProp>
                  <stringProp name="Argument.value">POB,APO,FPO,POST OFFICE BOX,POBOX,PO BOX,P.O. BOX,P.O.BOX</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:MobileCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:MobileCodeHidden</stringProp>
                  <stringProp name="Argument.value">65,91</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssociatedASPHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssociatedASPHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CountryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CountryHidden</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDINCORRECTSN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDINCORRECTSN</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SolutionTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SolutionTextBox</stringProp>
                  <stringProp name="Argument.value">asdasd</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboPickupCarrier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboPickupCarrier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:h_IDResource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:h_IDResource</stringProp>
                  <stringProp name="Argument.value">P1005Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ExpDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ExpDateHidden</stringProp>
                  <stringProp name="Argument.value">6/4/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISSameAsBillingHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISSameAsBillingHidden</stringProp>
                  <stringProp name="Argument.value">YES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:MobileHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:MobileHidden</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ISASPREASSIGNHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ISASPREASSIGNHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OOWProductLineHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OOWProductLineHidden</stringProp>
                  <stringProp name="Argument.value">C22S,C33G,C24S,C21S,C36S,C38S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CountryHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CountryHiddenField</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ManualTextHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ManualTextHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboTicketType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboTicketType</stringProp>
                  <stringProp name="Argument.value">T4C</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DefCodeHiddenValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DefCodeHiddenValue</stringProp>
                  <stringProp name="Argument.value">|77540958-1d3a-4420-8cfa-28eb318b4c3b</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AfsAccountNumberHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AfsAccountNumberHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:txtAddress1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:txtAddress1</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:cboAssetCategory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:cboAssetCategory</stringProp>
                  <stringProp name="Argument.value">C22S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseModeinCase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseModeinCase</stringProp>
                  <stringProp name="Argument.value">Normal</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:PhoneHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:PhoneHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtAcerAdv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtAcerAdv</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formOptions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formOptions</stringProp>
                  <stringProp name="Argument.value">{  &#xd;
   &quot;type&quot;:&quot;object&quot;,&#xd;
   &quot;focus&quot;:false,&#xd;
   &quot;helpers&quot;:[  &#xd;
&#xd;
   ],&#xd;
   &quot;validate&quot;:true,&#xd;
   &quot;disabled&quot;:false,&#xd;
   &quot;showMessages&quot;:true,&#xd;
   &quot;collapsible&quot;:false,&#xd;
   &quot;legendStyle&quot;:&quot;button&quot;,&#xd;
   &quot;fields&quot;:{  &#xd;
      &quot;IDTicket&quot;:{  &#xd;
         &quot;type&quot;:&quot;text&quot;,&#xd;
         &quot;label&quot;:&quot;IDTicket&quot;,&#xd;
         &quot;validate&quot;:true,&#xd;
         &quot;showMessages&quot;:true,&#xd;
         &quot;helpers&quot;:[  &#xd;
&#xd;
         ],&#xd;
         &quot;disabled&quot;:false,&#xd;
         &quot;hidden&quot;:true,&#xd;
         &quot;renderButtons&quot;:true,&#xd;
         &quot;data&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;attributes&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;allowOptionalEmpty&quot;:true,&#xd;
         &quot;autocomplete&quot;:false,&#xd;
         &quot;disallowEmptySpaces&quot;:false,&#xd;
         &quot;disallowOnlyEmptySpaces&quot;:false,&#xd;
         &quot;fields&quot;:{  &#xd;
&#xd;
         }&#xd;
      },&#xd;
      &quot;Price&quot;:{  &#xd;
         &quot;type&quot;:&quot;number&quot;,&#xd;
         &quot;label&quot;:&quot;Price&quot;,&#xd;
         &quot;validate&quot;:true,&#xd;
         &quot;showMessages&quot;:true,&#xd;
         &quot;helpers&quot;:[  &#xd;
&#xd;
         ],&#xd;
         &quot;disabled&quot;:false,&#xd;
         &quot;renderButtons&quot;:true,&#xd;
         &quot;data&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;attributes&quot;:{  &#xd;
&#xd;
         },&#xd;
         &quot;numericEntry&quot;:false,&#xd;
         &quot;allowOptionalEmpty&quot;:true,&#xd;
         &quot;autocomplete&quot;:false,&#xd;
         &quot;disallowEmptySpaces&quot;:false,&#xd;
         &quot;disallowOnlyEmptySpaces&quot;:false,&#xd;
         &quot;placeholder&quot;:&quot;Enter Price&quot;,&#xd;
         &quot;fields&quot;:{  &#xd;
&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AFSAccountNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AFSAccountNo</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerserveyvisibleHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerserveyvisibleHidden</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SearchTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SearchTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtSNID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtSNID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:CheckFromPageHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:CheckFromPageHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorResultHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorResultHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:IDAssetHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:IDAssetHidden</stringProp>
                  <stringProp name="Argument.value">H16340DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DateCreationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DateCreationHidden</stringProp>
                  <stringProp name="Argument.value">1/1/0001</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:txtPhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:txtPhone</stringProp>
                  <stringProp name="Argument.value">111111</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:IDCountryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:IDCountryHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MaxMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MaxMobileNo</stringProp>
                  <stringProp name="Argument.value">14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:Statehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:Statehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:HDADBNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:HDADBNameHidden</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:PriorityDefaultValuehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:PriorityDefaultValuehidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:txtName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:txtName</stringProp>
                  <stringProp name="Argument.value">,ezölKhplaR </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formdata" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formdata</stringProp>
                  <stringProp name="Argument.value">{&quot;IDTicket&quot;:&quot;0&quot;,&quot;Price&quot;:0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPOPCHANGED" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPOPCHANGED</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CIDHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:cboAvailabilityFrom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:cboAvailabilityFrom</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:BufferMonthsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:BufferMonthsHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:txtMobilePhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:txtMobilePhone</stringProp>
                  <stringProp name="Argument.value">111111</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formdata" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formdata</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:PostalCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:PostalCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtRemarks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtRemarks</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:IsAssignToDivHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:IsAssignToDivHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:IsEnableChkOption" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:IsEnableChkOption</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:ShowMoreInfoTab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:ShowMoreInfoTab</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:POPAvailableHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:POPAvailableHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formSchema" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formSchema</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendPermissionHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendPermissionHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:StateDropDownList" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:StateDropDownList</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:VerificationNotesNewTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:VerificationNotesNewTextBox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:TicketPriorityhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:TicketPriorityhidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:Updateclickhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:Updateclickhidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MobileCountryField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MobileCountryField</stringProp>
                  <stringProp name="Argument.value">Germany [49]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AssignToTxt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AssignToTxt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="HiddenElements" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">HiddenElements</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ReasonCodeDropdownlist" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ReasonCodeDropdownlist</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ProblemTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ProblemTextBox</stringProp>
                  <stringProp name="Argument.value">System Failure:    Ubuntu |   Manual Failure: NA ||</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyExpDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyExpDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerPOBOXValidationRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerPOBOXValidationRequired</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AvailTimeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AvailTimeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactIsSendSMSHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactIsSendSMSHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value">${ViewState3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:BufferExpDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:BufferExpDateHidden</stringProp>
                  <stringProp name="Argument.value">1/1/1900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:RetainProductHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:RetainProductHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:NameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:NameHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:cboSiteUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:cboSiteUser</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtSN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtSN</stringProp>
                  <stringProp name="Argument.value">${SNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PartNumberCopyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PartNumberCopyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactMobilehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactMobilehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:IsClosecaseHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:IsClosecaseHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_repairflag" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_repairflag</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:WarrantyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:WarrantyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:LoggedResourceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:LoggedResourceHidden</stringProp>
                  <stringProp name="Argument.value">P1005Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__LASTFOCUS" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__LASTFOCUS</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeSelectedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeSelectedHidden</stringProp>
                  <stringProp name="Argument.value">,77540958-1d3a-4420-8cfa-28eb318b4c3b,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MobilePhoneHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MobilePhoneHidden</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:selected_tab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:selected_tab</stringProp>
                  <stringProp name="Argument.value">#Case</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_IDResourceOrGroup" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_IDResourceOrGroup</stringProp>
                  <stringProp name="Argument.value">Szopinska Paulina</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IsNewCustomerHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IsNewCustomerHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:LabourWarrantyExpHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:LabourWarrantyExpHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:HideProductLineDropDown" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:HideProductLineDropDown</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SelectedBrandHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SelectedBrandHiddenField</stringProp>
                  <stringProp name="Argument.value">ACER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:InformationCaseTypeValueHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:InformationCaseTypeValueHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:OriginalBrandHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:OriginalBrandHiddenField</stringProp>
                  <stringProp name="Argument.value">ACER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:OldCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:OldCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value">T4C</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:UnderSpareOnlyWarrantyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:UnderSpareOnlyWarrantyHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PartModelHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PartModelHiddenField</stringProp>
                  <stringProp name="Argument.value">CM-BOARD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PurchaseDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PurchaseDateHidden</stringProp>
                  <stringProp name="Argument.value">06/04/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_IDResource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_IDResource</stringProp>
                  <stringProp name="Argument.value">P1005Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ShipToNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ShipToNameHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:CallFromHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:CallFromHidden</stringProp>
                  <stringProp name="Argument.value">CSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:VerificationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:VerificationHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formSchema" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formSchema</stringProp>
                  <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;type&quot;:&quot;object&quot;,&#xd;
   &quot;SPName&quot;:&quot;AcerCSS_CSS_SaveCustomizeData_CaseCreationMoreInfo_SP&quot;,&#xd;
   &quot;required&quot;:false,&#xd;
   &quot;properties&quot;:{  &#xd;
      &quot;IDTicket&quot;:{  &#xd;
         &quot;type&quot;:&quot;string&quot;,&#xd;
         &quot;required&quot;:false,&#xd;
         &quot;Parameter&quot;:&quot;IDTicket&quot;,&#xd;
         &quot;default&quot;:&quot;0&quot;,&#xd;
         &quot;properties&quot;:{  &#xd;
&#xd;
         }&#xd;
      },&#xd;
      &quot;Price&quot;:{  &#xd;
         &quot;type&quot;:&quot;number&quot;,&#xd;
         &quot;required&quot;:false,&#xd;
         &quot;Parameter&quot;:&quot;Price&quot;,&#xd;
         &quot;default&quot;:&quot;0.00&quot;,&#xd;
         &quot;maxLength&quot;:15,&#xd;
         &quot;properties&quot;:{  &#xd;
&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:StateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:StateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formOptions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formOptions</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ContactNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ContactNameHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyTypeHidden</stringProp>
                  <stringProp name="Argument.value">G00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ODMWarrantyIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ODMWarrantyIDHidden</stringProp>
                  <stringProp name="Argument.value">12:00:00 AM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DateFormatHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DateFormatHidden</stringProp>
                  <stringProp name="Argument.value">MM/dd/yyyy</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PartCreationURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PartCreationURL</stringProp>
                  <stringProp name="Argument.value">http://pls-uat.emea.intra.acer.com/csm/Pages/CSSSparesMaster.aspx?Source=CSS&amp;Banner=NO&amp;UserID=P1005Z&amp;Entity=ACG</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CheckCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CheckCountry</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DefaultFreightID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DefaultFreightID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FGHiddenValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FGHiddenValue</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboTicketPriority" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboTicketPriority</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WtyTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WtyTextBox</stringProp>
                  <stringProp name="Argument.value">No Warranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeListBox_Hidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeListBox_Hidden</stringProp>
                  <stringProp name="Argument.value"> [{ &quot;id&quot;: &quot;7eafceeb-95a4-4eca-b72f-0d19c2596e18&quot;, &quot;text&quot;: &quot;OPERATING SYSTEM&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;aa8e60ac-c616-45a8-bceb-0d4b72562084&quot;, &quot;text&quot;: &quot;MS XP&quot;},{ &quot;id&quot;: &quot;5b45a44b-6e7b-40d6-ab4d-1bf4ea99c049&quot;, &quot;text&quot;: &quot;MS Win7&quot;},{ &quot;id&quot;: &quot;c11b8ecb-bdc1-45b5-a810-27dac2b3c89d&quot;, &quot;text&quot;: &quot;Linpus&quot;},{ &quot;id&quot;: &quot;77540958-1d3a-4420-8cfa-28eb318b4c3b&quot;, &quot;text&quot;: &quot;Ubuntu&quot;},{ &quot;id&quot;: &quot;1bc31a2b-72e2-45eb-9e93-3461cee25f13&quot;, &quot;text&quot;: &quot;MS Vista&quot;},{ &quot;id&quot;: &quot;ecb51059-73ec-4491-98ea-96972576b3e9&quot;, &quot;text&quot;: &quot;Windows 7 Free Upgrade&quot;} ]},{ &quot;id&quot;: &quot;0046547b-b8e3-4550-a996-2dfc750cc871&quot;, &quot;text&quot;: &quot;OS Activation&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;a89b68fe-8ef1-4c41-8348-eac6a463b080&quot;, &quot;text&quot;: &quot;Error message: Not a genuine O/S version&quot;} ]},{ &quot;id&quot;: &quot;381addfb-9fb1-41ad-96bd-37b48c13bc41&quot;, &quot;text&quot;: &quot;LOGISTICS&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;8471cf7a-bb4d-4208-a397-5653b295262d&quot;, &quot;text&quot;: &quot;SHORT SHIPMENT&quot;},{ &quot;id&quot;: &quot;12348c8a-3cbd-42aa-a515-dd4d4434fa4e&quot;, &quot;text&quot;: &quot;WRONG SHIPMENT&quot;} ]},{ &quot;id&quot;: &quot;b5aafda7-c1be-402f-a45c-3b4c1b04eeb6&quot;, &quot;text&quot;: &quot;RETURNED FROM REPAIR&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;874a520a-1378-4220-a8c1-22a5ee79ece4&quot;, &quot;text&quot;: &quot;NOT REPAIRED PROPERLY&quot;},{ &quot;id&quot;: &quot;a6c29569-dfa7-4cd3-a009-2f58c99b4a6a&quot;, &quot;text&quot;: &quot;DAMAGED BUTTON&quot;},{ &quot;id&quot;: &quot;4d0b600d-385b-44be-9ac7-38a8edf4a7f3&quot;, &quot;text&quot;: &quot;MISSING ACCESSORY&quot;},{ &quot;id&quot;: &quot;ae96870d-ce6e-493b-964c-75dc7c5655b7&quot;, &quot;text&quot;: &quot;SCRATCH/CRACK&quot;},{ &quot;id&quot;: &quot;b385ad41-3585-4a82-9da4-7af717c3c8bf&quot;, &quot;text&quot;: &quot;MISSING HARDWARE&quot;},{ &quot;id&quot;: &quot;8d1cff50-4ed1-47f1-b3bb-da1a637963d4&quot;, &quot;text&quot;: &quot;MISSING MEDIA&quot;},{ &quot;id&quot;: &quot;a262e230-8aef-4eec-a43f-e006a8536f4f&quot;, &quot;text&quot;: &quot;SAME PROBLEM&quot;},{ &quot;id&quot;: &quot;cf499e81-c137-4147-85aa-f55e6c3f118b&quot;, &quot;text&quot;: &quot;POOR ASSEMBLY&quot;} ]},{ &quot;id&quot;: &quot;9e1c34b3-bc0a-4678-91e2-3f8506dddbb5&quot;, &quot;text&quot;: &quot;Sandy Bridge&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;fc3dd17e-1585-483d-bae8-480637dcb2c6&quot;, &quot;text&quot;: &quot;NA&quot;} ]},{ &quot;id&quot;: &quot;54e2dce2-b20c-4600-b069-403e4ecdfea5&quot;, &quot;text&quot;: &quot;MECHANICAL / COSMETIC&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;f5493332-a942-467e-9b69-0d6fa66063ad&quot;, &quot;text&quot;: &quot;MECHANICAL MISSING PARTS&quot;},{ &quot;id&quot;: &quot;342c5f3f-68f2-4a3e-88c2-0f8d00b6b9aa&quot;, &quot;text&quot;: &quot;MEMORY COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;86a2a80d-0236-4541-8a10-120bb7854374&quot;, &quot;text&quot;: &quot;CASING SCRATCH&quot;},{ &quot;id&quot;: &quot;b1090821-256c-4503-ac43-1a13a7c9ca88&quot;, &quot;text&quot;: &quot;CASING POOR ASSEMBLY&quot;},{ &quot;id&quot;: &quot;d47609c9-60d7-47da-9a82-1ff76a8b52ea&quot;, &quot;text&quot;: &quot;POWER SUPPLY COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;4080c3e8-56e1-43d9-a176-23afe9ac3c0a&quot;, &quot;text&quot;: &quot;MICROPHONE/SPEAKER COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;fd548583-9be1-4b14-9837-2532ba1e3ff5&quot;, &quot;text&quot;: &quot;CASING GAP&quot;},{ &quot;id&quot;: &quot;086a1e81-a7a9-4cfc-8508-2f3ec250f374&quot;, &quot;text&quot;: &quot;KB COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;da63e6d8-d974-4f1f-a555-31e9866cfcb8&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE NOISY&quot;},{ &quot;id&quot;: &quot;0306f8bb-2e14-4bca-9614-362fb139a773&quot;, &quot;text&quot;: &quot;AUDIO CARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;b34bf0d4-6e78-49ba-8b74-3b8018919f6f&quot;, &quot;text&quot;: &quot;BUTTON STUCK&quot;},{ &quot;id&quot;: &quot;fa36d188-43fd-4e0d-a34f-45d958ba4f67&quot;, &quot;text&quot;: &quot;VGA CARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;0d95bd6a-4bc6-4652-bc8f-54e31b808362&quot;, &quot;text&quot;: &quot;MISCELLANEOUS MISSING PARTS&quot;},{ &quot;id&quot;: &quot;86a98284-5b5f-4746-b0da-647058975129&quot;, &quot;text&quot;: &quot;MISCELLANEOUS COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;422ea4fd-0019-4d30-b245-6c16819d7876&quot;, &quot;text&quot;: &quot;FDD BEZEL BROKEN&quot;},{ &quot;id&quot;: &quot;354b82e9-7025-4d0a-8995-72eee89729fc&quot;, &quot;text&quot;: &quot;MECHANICAL MELT&quot;},{ &quot;id&quot;: &quot;eeb8e4c2-e748-4615-acd9-76c539dbd594&quot;, &quot;text&quot;: &quot;MODEM/LAN CARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;8c938e00-4ab9-4d58-bc7c-80c92630ef3c&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;e7716871-06e0-4fd4-bc12-85c635d5b5eb&quot;, &quot;text&quot;: &quot;PC CARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;c4b3939d-2a4a-42cf-b74d-8e38a0563df4&quot;, &quot;text&quot;: &quot;ADAPTER CONNECTOR BROKEN&quot;},{ &quot;id&quot;: &quot;ef9bd98c-9d4b-4fa2-8c5d-97b0d45671e9&quot;, &quot;text&quot;: &quot;MAINBOARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;7229c108-b5fa-4d1a-9f6d-9fdc7453033d&quot;, &quot;text&quot;: &quot;ACCESSORY COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;9ba8216d-999d-4226-a8b1-a0ec246c886e&quot;, &quot;text&quot;: &quot;BUTTON BROKEN&quot;},{ &quot;id&quot;: &quot;ab2ed07b-3a2c-47ba-917b-a483b35ada7e&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE LED FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;d3dedafc-e16c-4907-99d6-acffb163d8e3&quot;, &quot;text&quot;: &quot;ADAPTER COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;fb7e5537-ee2e-4235-a3f2-bf4f61761c47&quot;, &quot;text&quot;: &quot;HDD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;d570ba2e-fe26-4cc2-968e-c75c8dd8daa3&quot;, &quot;text&quot;: &quot;OTHER STORAGE DEVICE COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;7e6af48f-e471-4ca4-8346-c8ad1bc94ca0&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE TRAY/BEZEL BROKEN&quot;},{ &quot;id&quot;: &quot;1e1790de-061f-400a-a910-c8e979dbf624&quot;, &quot;text&quot;: &quot;MECHANICAL BROKEN&quot;},{ &quot;id&quot;: &quot;4c00ac7c-c59b-4f99-b0db-d2d7ebe4510b&quot;, &quot;text&quot;: &quot;POWER SUPPLY CONNECTOR BROKEN&quot;},{ &quot;id&quot;: &quot;3da1b7d1-cbce-485a-a689-f3f5ad40d06b&quot;, &quot;text&quot;: &quot;THERMAL BROKEN&quot;},{ &quot;id&quot;: &quot;7f5149ad-e4c3-443a-a4ba-fcab1f451ce1&quot;, &quot;text&quot;: &quot;CABLE COSMETIC DAMAGE&quot;} ]},{ &quot;id&quot;: &quot;fce7ed2b-adeb-4fdc-bd22-4656768d3404&quot;, &quot;text&quot;: &quot;NETWORKING/ COMMUNICATION&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;95b0eb64-09a8-4c94-a628-0a09522a5309&quot;, &quot;text&quot;: &quot;MODEM/LAN WONT RECEIVE/SEND FAX&quot;},{ &quot;id&quot;: &quot;41716941-457f-462e-a0a8-210a329a4b72&quot;, &quot;text&quot;: &quot;WIRELESS FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;83edd7f7-31eb-466e-9dc6-21f3510276cd&quot;, &quot;text&quot;: &quot;MODEM NO DIAL TONE&quot;},{ &quot;id&quot;: &quot;49619c11-7b46-4151-93d5-2954932a5919&quot;, &quot;text&quot;: &quot;MODEM/LAN DEAD (NO RESPONSE)&quot;},{ &quot;id&quot;: &quot;fab0e134-5ec2-411c-866b-710eb41b2c64&quot;, &quot;text&quot;: &quot;CONNECTION LOST/POOR SIGNAL&quot;},{ &quot;id&quot;: &quot;81b8c910-d479-4a5f-82a4-7985a2f31a08&quot;, &quot;text&quot;: &quot;WIFI SYNC. ERROR&quot;},{ &quot;id&quot;: &quot;66f20b86-99f0-4e14-b790-7be9357bedde&quot;, &quot;text&quot;: &quot;XDSL CONNECTION FAIL&quot;},{ &quot;id&quot;: &quot;3fd8e1c4-f9b5-409a-a11e-821c4ac38983&quot;, &quot;text&quot;: &quot;BLUETOOTH FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;7a6f5563-00a4-4a94-b89f-97e4832e2751&quot;, &quot;text&quot;: &quot;MODEM/LAN DISCONNECT FREQUENTLY&quot;},{ &quot;id&quot;: &quot;8ef5e8de-8958-4cf8-9ee2-a651f3b17b38&quot;, &quot;text&quot;: &quot;BLUETOOTH CARD NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;3e0572be-e329-4b6d-82c9-b89c9ad2c8f0&quot;, &quot;text&quot;: &quot;MODEM/LAN NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;5c0fa6e0-63cf-4041-9468-c0de21188315&quot;, &quot;text&quot;: &quot;WIRELESS DISCONNECT FREQUENTLY&quot;},{ &quot;id&quot;: &quot;7ae07dde-305a-45e1-b163-d6efefebb446&quot;, &quot;text&quot;: &quot;LONG DURATION ON SEARCHING NETWORK&quot;},{ &quot;id&quot;: &quot;36fa493f-2b7a-4ee2-a8df-fbdedf691a11&quot;, &quot;text&quot;: &quot;MODEM/LAN FAIL TO CONNECT&quot;} ]},{ &quot;id&quot;: &quot;d148c498-eb22-46e1-8ca1-53062c3c204e&quot;, &quot;text&quot;: &quot;RF &amp; TV SIGNAL&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;68a86270-41b9-4f8e-86e9-563e661cab69&quot;, &quot;text&quot;: &quot;ANTENNA FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;de625dcf-8197-4a2e-9136-7e313c6486bd&quot;, &quot;text&quot;: &quot;NO TV SIGNAL&quot;},{ &quot;id&quot;: &quot;80e50fe9-890b-4c50-b2dc-99efe4400487&quot;, &quot;text&quot;: &quot;TV CHANNEL SEARCH FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;64dd737d-8748-455a-ae1d-9c16686c3938&quot;, &quot;text&quot;: &quot;RF NO SIGNAL&quot;},{ &quot;id&quot;: &quot;b740b166-f6c9-4e16-99db-b2d131e103cd&quot;, &quot;text&quot;: &quot;POOR SIGNAL&quot;},{ &quot;id&quot;: &quot;07b9a1e7-06c6-49de-a53c-b468e0206113&quot;, &quot;text&quot;: &quot;POOR RF SIGNAL&quot;},{ &quot;id&quot;: &quot;66fdd8b5-08ea-4abf-9e20-d6a7498f461f&quot;, &quot;text&quot;: &quot;TV CHANNEL SELECTION DELAY&quot;} ]},{ &quot;id&quot;: &quot;e1c07305-5bea-4786-8d54-53de17536f78&quot;, &quot;text&quot;: &quot;Configuring and Maintaining &quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;e567e26b-6ce7-4316-8655-8b3fa19670db&quot;, &quot;text&quot;: &quot;Windows Update&quot;} ]},{ &quot;id&quot;: &quot;7657b5f2-eed4-4eeb-b106-57758ea52526&quot;, &quot;text&quot;: &quot;DISPLAY&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;184be1f4-10a6-4dc9-aef5-25a35e3b6a04&quot;, &quot;text&quot;: &quot;PICTURE SHAKIN&quot;},{ &quot;id&quot;: &quot;33f0f0d5-1d0e-4e5b-8430-2a5648db9094&quot;, &quot;text&quot;: &quot;PICTURE SHIFTING&quot;},{ &quot;id&quot;: &quot;ef618149-3347-43a2-8712-518982fa29ad&quot;, &quot;text&quot;: &quot;WHITE SCREEN&quot;},{ &quot;id&quot;: &quot;6cc2b81c-71ed-4cda-a608-5af573ad3626&quot;, &quot;text&quot;: &quot;VIDEO NOT SYNC (PICTURE CHANGE BUT OLD PICTURE STILL HAS SHADOW)&quot;},{ &quot;id&quot;: &quot;19100630-217f-4c24-93bf-67fa14dba7f3&quot;, &quot;text&quot;: &quot;ABNORMAL BLOCK&quot;},{ &quot;id&quot;: &quot;040dfaaa-dd3e-440a-99eb-80fe0974d93c&quot;, &quot;text&quot;: &quot;NO DISPLAY&quot;},{ &quot;id&quot;: &quot;06bb0b8b-acc8-4d71-acbf-e154304a79c6&quot;, &quot;text&quot;: &quot;ABNORMAL COLOR&quot;},{ &quot;id&quot;: &quot;1e9c554d-aa31-4d53-a497-f22ac1b52cfa&quot;, &quot;text&quot;: &quot;DISPLAY UNIFORMITY&quot;} ]},{ &quot;id&quot;: &quot;5e25310b-7ffd-4d44-8a70-629c5dee3db7&quot;, &quot;text&quot;: &quot;PRINTER&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;cabbad4a-3136-4139-82a3-82f11651eecf&quot;, &quot;text&quot;: &quot;FAIL TO PRINT&quot;} ]},{ &quot;id&quot;: &quot;9d379347-707c-4e8f-b929-632d4fd9c9da&quot;, &quot;text&quot;: &quot;To be Defined by Technician&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;53fe9c33-67fb-4dee-a064-141d96e1f50b&quot;, &quot;text&quot;: &quot;To be Defined by Technician&quot;} ]},{ &quot;id&quot;: &quot;9733b1d7-e386-4dd6-b8d0-780598f77380&quot;, &quot;text&quot;: &quot;AUDIO&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;c0b6be2e-a9a9-4ac5-99c7-0d3a3b1e670c&quot;, &quot;text&quot;: &quot;NOT RECORDING&quot;},{ &quot;id&quot;: &quot;28c19c23-b4a3-45db-b8ed-1a75b2cf38d9&quot;, &quot;text&quot;: &quot;SOUND INTERNITTENT&quot;},{ &quot;id&quot;: &quot;723d8852-5405-4bf6-8e04-342ffd200bcb&quot;, &quot;text&quot;: &quot;ABNORMAL SOUND&quot;},{ &quot;id&quot;: &quot;617d90c9-6479-4914-94e4-4c81fb23f563&quot;, &quot;text&quot;: &quot;AUDIO DEVICE NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;8f84a285-bc3b-4c30-822d-88bcef740ddb&quot;, &quot;text&quot;: &quot;EARPHONE FAIL&quot;},{ &quot;id&quot;: &quot;fce0586a-38e4-4338-9619-a51cf5080a39&quot;, &quot;text&quot;: &quot;SOUND GARBLED/POOR QUALITY&quot;},{ &quot;id&quot;: &quot;d05b246b-041b-4b94-a2f8-bb9e775a5444&quot;, &quot;text&quot;: &quot;HEADSET ABNORMAL AUDIO&quot;},{ &quot;id&quot;: &quot;0de0326c-9f1d-438a-9710-c9478c71bba1&quot;, &quot;text&quot;: &quot;NO SOUND&quot;},{ &quot;id&quot;: &quot;f27ad15a-c1bd-4e23-b765-dacd2c85f993&quot;, &quot;text&quot;: &quot;ABNORMAL SOUND-PLAYED SPEED&quot;},{ &quot;id&quot;: &quot;afbc6b54-a950-49cd-aa81-f3c8d7273a1e&quot;, &quot;text&quot;: &quot;PLAYBACK NOISE FROM RECORDING&quot;} ]},{ &quot;id&quot;: &quot;b38d7ac9-57ea-454c-bf34-7c8c3681cfea&quot;, &quot;text&quot;: &quot;STORAGE&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;dbb687a4-4dce-4e9a-8ccf-01355ac5b16c&quot;, &quot;text&quot;: &quot;FDD WILL NOT READ/WRITE&quot;},{ &quot;id&quot;: &quot;c02ec840-c79e-4ac8-b98b-19a2c414200f&quot;, &quot;text&quot;: &quot;CANT RECOGNIZE STORAGE CARD&quot;},{ &quot;id&quot;: &quot;a058cf62-eed5-42c6-8711-1a753b23e534&quot;, &quot;text&quot;: &quot;HDD NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;8ee2941a-1c2d-45c4-9814-1cf9a3d77530&quot;, &quot;text&quot;: &quot;HDD DEFECTIVE SECTORS&quot;},{ &quot;id&quot;: &quot;bd76b4c7-1cf1-43c3-a338-1d243f388310&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;9496317b-fc62-425d-88b7-4d7855e511ce&quot;, &quot;text&quot;: &quot;HDD WILL NOT READ/WRITE&quot;},{ &quot;id&quot;: &quot;17537c61-dda3-4781-91ac-51eee4e4b07a&quot;, &quot;text&quot;: &quot;FDD WILL NOT BOOT&quot;},{ &quot;id&quot;: &quot;da5de642-2e06-4041-8c0b-5af2360d721d&quot;, &quot;text&quot;: &quot;HDD WILL NOT BOOT&quot;},{ &quot;id&quot;: &quot;31601641-6ecc-4fd3-9bc3-60fe1a0db702&quot;, &quot;text&quot;: &quot;FDD NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;5b662b61-13d4-4c01-aec3-6beffcde968d&quot;, &quot;text&quot;: &quot;FDD LED FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;5ba3ce10-2331-4ac0-83d8-77d8223152f8&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE NO POWER&quot;},{ &quot;id&quot;: &quot;214f7e58-7f7d-477c-88d6-78bf000e4037&quot;, &quot;text&quot;: &quot;HDD WILL NOT SPIN &quot;},{ &quot;id&quot;: &quot;e0ff3137-9921-4e63-8084-7a7820731452&quot;, &quot;text&quot;: &quot;STORAGE CARD SOCKET DAMAGE&quot;},{ &quot;id&quot;: &quot;155ef546-a043-4607-b67d-8b4914ee6bf1&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE LED FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;03416ea4-dc76-45db-b621-8ef708555f05&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE WILL NOT READ/WRITE&quot;},{ &quot;id&quot;: &quot;dff509ef-01f6-4360-87d0-948cb47b642a&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE WILL NOT BOOT&quot;},{ &quot;id&quot;: &quot;85e75969-7de7-4fe4-89da-96aaa599f099&quot;, &quot;text&quot;: &quot;SCSI CARD FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;8e119291-0d23-4f96-bf42-a1295ab9d4cc&quot;, &quot;text&quot;: &quot;STORAGE CARD READ/WRITE ERROR&quot;},{ &quot;id&quot;: &quot;57215f05-658e-4036-8a5d-ab18e229f059&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE SCRAPES THE DISKS&quot;},{ &quot;id&quot;: &quot;504e04fb-a7bb-4612-8b93-b8e8faabf8cd&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE CANT INSERT/EJECT&quot;},{ &quot;id&quot;: &quot;e7d91192-3074-4245-9358-bd7096716d50&quot;, &quot;text&quot;: &quot;FDD WILL NOT SPIN&quot;},{ &quot;id&quot;: &quot;c6f4c127-5fd4-40e1-aebc-c9d230f4b84a&quot;, &quot;text&quot;: &quot;CARDREADER FAILURE&quot;},{ &quot;id&quot;: &quot;bdda0b67-fd72-4e39-96b2-ca251ea51866&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE AUDIO ERROR&quot;},{ &quot;id&quot;: &quot;579d4771-b8b1-461c-b595-e1651d900a4d&quot;, &quot;text&quot;: &quot;FDD CANT INSERT/EJECT&quot;} ]},{ &quot;id&quot;: &quot;2fc8ffd7-52d6-49fc-8eaa-874e79333f50&quot;, &quot;text&quot;: &quot;Hardware conflicts or setup&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;904d042d-4f55-4231-a053-0244fb03d4bf&quot;, &quot;text&quot;: &quot;Joy Sticks&quot;},{ &quot;id&quot;: &quot;1e783485-f56b-4dc6-bef4-0cfc34b0012f&quot;, &quot;text&quot;: &quot;Media Readers&quot;},{ &quot;id&quot;: &quot;f5a708d4-2378-4b89-99c1-11129326a16f&quot;, &quot;text&quot;: &quot;Hard Drives&quot;},{ &quot;id&quot;: &quot;9c1e61fb-bbb3-47ab-a355-12fa1f58fa12&quot;, &quot;text&quot;: &quot;Tape Drives&quot;},{ &quot;id&quot;: &quot;ea82e8ca-1cbd-4e3b-bd66-4142ec327889&quot;, &quot;text&quot;: &quot;Floppy Drives&quot;},{ &quot;id&quot;: &quot;0c453bfa-906b-48c2-94a8-4badfc7af9cb&quot;, &quot;text&quot;: &quot;Bluetooth Adapters&quot;},{ &quot;id&quot;: &quot;a0cf2c54-ba3a-40b1-bb13-4e3df2195b62&quot;, &quot;text&quot;: &quot;Remote Controls&quot;},{ &quot;id&quot;: &quot;8d0525df-4994-4b6f-a6e0-56b79dd11651&quot;, &quot;text&quot;: &quot;Keyboards&quot;},{ &quot;id&quot;: &quot;f3394ed0-fb7a-4b21-b943-5f0ecd84887c&quot;, &quot;text&quot;: &quot;Audio and Sound&quot;},{ &quot;id&quot;: &quot;4f6b087c-5bfc-4f53-918f-6023bcf1fcc1&quot;, &quot;text&quot;: &quot;Broadband Modems&quot;},{ &quot;id&quot;: &quot;fe4f86a3-48e7-4e15-b8bd-6177e507117f&quot;, &quot;text&quot;: &quot;Routers HUBS or Access Points&quot;},{ &quot;id&quot;: &quot;be52c6fc-3f48-4046-b3c2-69107a6bab7d&quot;, &quot;text&quot;: &quot;Network Interface Cards&quot;},{ &quot;id&quot;: &quot;780a3173-f9f3-4475-8b38-6dfba27c95a0&quot;, &quot;text&quot;: &quot;USB and Serial Ports&quot;},{ &quot;id&quot;: &quot;91983a3d-4652-4858-87dd-6e3915690ac8&quot;, &quot;text&quot;: &quot;TV Tuners&quot;},{ &quot;id&quot;: &quot;008d4ae3-d854-4496-9081-8251ff5699da&quot;, &quot;text&quot;: &quot;Printers&quot;},{ &quot;id&quot;: &quot;8cb02466-7831-4077-9445-8ba2ed1aa5f7&quot;, &quot;text&quot;: &quot;Projectors&quot;},{ &quot;id&quot;: &quot;b5fc1c34-96a7-49ca-bdc2-94ee01f5406a&quot;, &quot;text&quot;: &quot;Scanners&quot;},{ &quot;id&quot;: &quot;f4bb1811-ac24-4cdb-942c-9edbc6e9d8f8&quot;, &quot;text&quot;: &quot;Video Capture&quot;},{ &quot;id&quot;: &quot;e65885ac-0019-4c2e-a1ca-9ee5f90f8983&quot;, &quot;text&quot;: &quot;Docking Station&quot;},{ &quot;id&quot;: &quot;ac9e5592-f500-4f91-8dcd-a85caebf625f&quot;, &quot;text&quot;: &quot;Optical Drives&quot;},{ &quot;id&quot;: &quot;881f5574-046e-4fdf-9bd9-a914058f01fa&quot;, &quot;text&quot;: &quot;Storage Interface Cards&quot;},{ &quot;id&quot;: &quot;6dc2b71c-363f-421c-a206-bf5eee0c88ac&quot;, &quot;text&quot;: &quot;Cameras&quot;},{ &quot;id&quot;: &quot;08f33c09-706b-4547-9916-c24f3ee67e16&quot;, &quot;text&quot;: &quot;LCD Panel Brightness&quot;},{ &quot;id&quot;: &quot;0d37a077-9fcd-4160-b7b1-c3e7a1011a1b&quot;, &quot;text&quot;: &quot;Fingerprint Reader&quot;},{ &quot;id&quot;: &quot;d8b34acf-78dc-4c34-98ae-c42d61ba11a8&quot;, &quot;text&quot;: &quot;Card Slots (pc-card and pumice)&quot;},{ &quot;id&quot;: &quot;432ede27-6d15-4a8f-bdbd-cb2b15a123f2&quot;, &quot;text&quot;: &quot;Mouse or Touchpad&quot;},{ &quot;id&quot;: &quot;892733d6-bcb9-452a-a287-e8c560b8225c&quot;, &quot;text&quot;: &quot;Dial up Modems&quot;},{ &quot;id&quot;: &quot;edab720b-ac6c-45b8-bee6-e9ffefd2ce55&quot;, &quot;text&quot;: &quot;Video Cards&quot;},{ &quot;id&quot;: &quot;05ced61b-e20a-41b0-9642-f2f516ae0339&quot;, &quot;text&quot;: &quot;1394 Controllers&quot;} ]},{ &quot;id&quot;: &quot;7d148da9-44b0-4ca6-b52b-91161588adf7&quot;, &quot;text&quot;: &quot;SYSTEM FUNCTION&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;2e3eada4-2d11-4a16-94dd-001f750384c6&quot;, &quot;text&quot;: &quot;FAN CANT SPIN&quot;},{ &quot;id&quot;: &quot;42e9379a-206d-4bfa-a386-0185ff42611c&quot;, &quot;text&quot;: &quot;SYSTEM HIBERNATION/STANDBY FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;7e2520e5-3ca3-4fea-97b3-026aef9fe874&quot;, &quot;text&quot;: &quot;SYSTEM AUTO SHUTDOWN&quot;},{ &quot;id&quot;: &quot;39efdca0-cc9c-4aef-841f-0fd47d7c365c&quot;, &quot;text&quot;: &quot;Faulty BIOS&quot;},{ &quot;id&quot;: &quot;acf0b9c2-6e94-420d-8eec-21bbbc1ef412&quot;, &quot;text&quot;: &quot;SYSTEM FAIL TO FLASH BIOS&quot;},{ &quot;id&quot;: &quot;91631599-3562-436d-914f-284bdd481fc2&quot;, &quot;text&quot;: &quot;MEMORY NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;e4666434-1b5e-4c78-bcde-3814f9aec738&quot;, &quot;text&quot;: &quot;SYSTEM CANT WAKE UP FROM HIBERNATION/STANDBY CONDITION&quot;},{ &quot;id&quot;: &quot;f6bd2a77-ffa2-42d5-b439-3db0d703b65c&quot;, &quot;text&quot;: &quot;LEAKAGE OF ELECTRICITY&quot;},{ &quot;id&quot;: &quot;1226a1ad-32d8-4073-84f3-3e8c4475ffbc&quot;, &quot;text&quot;: &quot;SYSTEM CANT BOOT&quot;},{ &quot;id&quot;: &quot;ba621be4-c739-429b-baa8-6031c9c88a5d&quot;, &quot;text&quot;: &quot;CANT POWER ON SYSTEM&quot;},{ &quot;id&quot;: &quot;eef7807e-e61d-4cb2-bafe-64c07ea21b48&quot;, &quot;text&quot;: &quot;CANT RESET SYSTEM&quot;},{ &quot;id&quot;: &quot;74b81981-0315-456f-9035-6732a8e2e1c4&quot;, &quot;text&quot;: &quot;SYSTEM CLOCK ERROR&quot;},{ &quot;id&quot;: &quot;6572f203-8081-480a-9f44-726d77fb9546&quot;, &quot;text&quot;: &quot;SYSTEM BURNT&quot;},{ &quot;id&quot;: &quot;6de3632b-3834-4b73-9489-758fc0cc4b82&quot;, &quot;text&quot;: &quot;Third party hardware error&quot;},{ &quot;id&quot;: &quot;85163ef5-951b-4863-b1f1-7c8ac86fe0af&quot;, &quot;text&quot;: &quot;MEMORY PARITY ERROR&quot;},{ &quot;id&quot;: &quot;33afc7e8-0785-4f2f-8d91-9d1cc08fad3d&quot;, &quot;text&quot;: &quot;MEMORY SIZE ERROR&quot;},{ &quot;id&quot;: &quot;31b53fcc-3f5b-4b8d-bd46-a0c693d3ede2&quot;, &quot;text&quot;: &quot;POWER SUPPLY BURNT&quot;},{ &quot;id&quot;: &quot;98ceb3c9-bec5-4930-8cda-a6ac0d23be81&quot;, &quot;text&quot;: &quot;LED INDICATOR FAILURE&quot;},{ &quot;id&quot;: &quot;d51d8511-94a8-4929-aaff-a7c43df6cfc5&quot;, &quot;text&quot;: &quot;BIOS CANT SAVE DATA&quot;},{ &quot;id&quot;: &quot;8fe07d68-885e-4dd7-9aa9-b629c83e5d73&quot;, &quot;text&quot;: &quot;SYSTEM UNSTABLE&quot;},{ &quot;id&quot;: &quot;8e691021-9f23-42d0-9b1b-bfd776d37fcd&quot;, &quot;text&quot;: &quot;ADAPTER DEAD&quot;},{ &quot;id&quot;: &quot;ab798cae-103d-4782-bf01-c9fe3217fa46&quot;, &quot;text&quot;: &quot;BLUE SCREEN&quot;},{ &quot;id&quot;: &quot;6e6d92a6-f61d-42d8-aca0-cfb71d8be50c&quot;, &quot;text&quot;: &quot;SYSTEM OVERHEATS&quot;},{ &quot;id&quot;: &quot;c8945db9-1a8c-4464-a8aa-dde74536bfb6&quot;, &quot;text&quot;: &quot;SYSTEM AUTO REBOOT&quot;},{ &quot;id&quot;: &quot;83fd1958-c0e6-4219-bb46-ef30f2bd4f80&quot;, &quot;text&quot;: &quot;TV CHANNEL SEARCH FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;375dff4e-1884-4f8b-9eb4-f21373c2f739&quot;, &quot;text&quot;: &quot;SYSTEM HANG UP&quot;} ]},{ &quot;id&quot;: &quot;527acc80-0fcc-4535-8954-95004dd82246&quot;, &quot;text&quot;: &quot;NOISY&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;5029117e-4287-4091-9007-1431dc1e7c69&quot;, &quot;text&quot;: &quot;SPEAKER NOISY&quot;},{ &quot;id&quot;: &quot;769e196a-784f-44d1-8220-211e8946120d&quot;, &quot;text&quot;: &quot;ADAPTER NOISY&quot;},{ &quot;id&quot;: &quot;9e97a792-f1d0-425a-9e2f-2fc55eb76d3e&quot;, &quot;text&quot;: &quot;LCD NOISY&quot;},{ &quot;id&quot;: &quot;5c67a02e-4dfd-4c73-80cc-43db20d9f47a&quot;, &quot;text&quot;: &quot;LOW FREQUENCY NOISY&quot;},{ &quot;id&quot;: &quot;2f39608f-9e77-4dc2-b0a5-542463833de6&quot;, &quot;text&quot;: &quot;FAN NOISY&quot;},{ &quot;id&quot;: &quot;a690cec2-1099-4149-b279-69257477a077&quot;, &quot;text&quot;: &quot;HDD NOISY&quot;},{ &quot;id&quot;: &quot;d4a372a1-1456-466a-8931-82fe739d3805&quot;, &quot;text&quot;: &quot;OPTICAL DEVICE NOISY&quot;},{ &quot;id&quot;: &quot;9056e03a-b3df-420c-8cb5-8f17c1cf25be&quot;, &quot;text&quot;: &quot;HIGH FREQUENCY NOISY&quot;},{ &quot;id&quot;: &quot;50fac853-0af6-4d69-8369-baa4eaa966d6&quot;, &quot;text&quot;: &quot;FDD NOISY&quot;},{ &quot;id&quot;: &quot;9dd843ce-be81-42d9-af33-d51bfb3bfae8&quot;, &quot;text&quot;: &quot;POWER SUPPLY NOISY&quot;} ]},{ &quot;id&quot;: &quot;fd283159-3868-4ea2-90d9-950ce803d1dc&quot;, &quot;text&quot;: &quot;Diagnostic and Recovery Tools&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;ad910744-695f-4543-b419-18343de06249&quot;, &quot;text&quot;: &quot;System Restore&quot;},{ &quot;id&quot;: &quot;d30fa77e-1cfe-4de2-823d-1d05e504657f&quot;, &quot;text&quot;: &quot;Error Reporting&quot;},{ &quot;id&quot;: &quot;8bd74f1a-d44f-4a71-b372-1efc3783a24c&quot;, &quot;text&quot;: &quot;WinPE&quot;},{ &quot;id&quot;: &quot;29877292-9a41-4269-b172-2af0d03520b5&quot;, &quot;text&quot;: &quot;Boot Config Mgr&quot;},{ &quot;id&quot;: &quot;36c20ba5-aab3-4d81-9de8-45466797f63e&quot;, &quot;text&quot;: &quot;Live Meeting&quot;},{ &quot;id&quot;: &quot;8ce0d905-c5ba-4cae-afb3-4f00e656cb5a&quot;, &quot;text&quot;: &quot;Registry Editor&quot;},{ &quot;id&quot;: &quot;53072cce-3a6e-4a70-87fb-508a245e17ea&quot;, &quot;text&quot;: &quot;MSINFO&quot;},{ &quot;id&quot;: &quot;54630a6d-21e2-4ddf-b4a1-71de127209b0&quot;, &quot;text&quot;: &quot;DXDiag&quot;},{ &quot;id&quot;: &quot;bf67aff7-7081-4301-b78a-ada1598d9967&quot;, &quot;text&quot;: &quot;ASR(Automatic System Recovery)&quot;},{ &quot;id&quot;: &quot;5dee47d5-056d-4db1-874a-b949eca97f12&quot;, &quot;text&quot;: &quot;MSCONFIG&quot;},{ &quot;id&quot;: &quot;7b2030e4-ffe8-4e28-96fb-dc8f14bae4cd&quot;, &quot;text&quot;: &quot;SRT(System Recovery Troubleshooter)&quot;},{ &quot;id&quot;: &quot;cc9552bf-be15-4538-94ac-edeb59bad9d3&quot;, &quot;text&quot;: &quot;Help and Support Center&quot;},{ &quot;id&quot;: &quot;3eb6c526-fb33-410a-aa25-f880fdc49516&quot;, &quot;text&quot;: &quot;Recovery Console&quot;},{ &quot;id&quot;: &quot;b88b099c-af75-457f-b1a6-ff026db7b998&quot;, &quot;text&quot;: &quot;MS Memory Diagnostic&quot;} ]},{ &quot;id&quot;: &quot;0da96b0d-db04-4aa4-ab5b-97a04931a52c&quot;, &quot;text&quot;: &quot;MAINBOARD&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;18b7569d-3e94-47f7-a7ba-09e03276a84e&quot;, &quot;text&quot;: &quot;MAINBOARD MISSING PART&quot;},{ &quot;id&quot;: &quot;6f79e004-5118-4a9a-a43b-2f1c72d909a6&quot;, &quot;text&quot;: &quot;NO BOOT&quot;},{ &quot;id&quot;: &quot;3cddbfc7-c55e-4884-b61a-44157551f713&quot;, &quot;text&quot;: &quot;MAINBOARD SYSTEM UNSTABLE&quot;},{ &quot;id&quot;: &quot;47ba5128-e552-449e-9cc5-47cedc08f5b0&quot;, &quot;text&quot;: &quot;MAINBOARD HIBERNATION/STANDBY FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;7ecdbb98-48e6-4f11-88a0-6614ba674e32&quot;, &quot;text&quot;: &quot;MAINBOARD DISK READ/WRITE FAILURE&quot;},{ &quot;id&quot;: &quot;947d38ff-1248-4e01-a30f-7043edc54266&quot;, &quot;text&quot;: &quot;MAINBOARD AUTO SHUTDOWN&quot;},{ &quot;id&quot;: &quot;ff44d5e0-6513-4fbd-aa69-74d9d0cd1693&quot;, &quot;text&quot;: &quot;RUSTY M/B&quot;},{ &quot;id&quot;: &quot;689c7bb4-e443-4405-930c-7bb8035b1add&quot;, &quot;text&quot;: &quot;M/B CANT WAKE UP FROM HIBERNATION/STANDBY CONDITION&quot;},{ &quot;id&quot;: &quot;53a73768-bbdb-4931-9de6-9058509fb966&quot;, &quot;text&quot;: &quot;MAINBOARD FAIL TO FLASH BIOS&quot;},{ &quot;id&quot;: &quot;8ca747e2-c521-4580-8a1a-a73cbee9e228&quot;, &quot;text&quot;: &quot;ONBOARD VGA FAIL&quot;},{ &quot;id&quot;: &quot;3c0aae81-d5ce-4b89-bec7-abab41d1afa2&quot;, &quot;text&quot;: &quot;PORT NOT WORKING&quot;},{ &quot;id&quot;: &quot;90b37948-7bee-44c4-8468-abfd80514474&quot;, &quot;text&quot;: &quot;MAINBOARD CONNECTOR DAMAGED&quot;},{ &quot;id&quot;: &quot;64c7e260-4863-4473-9262-bca92f36871c&quot;, &quot;text&quot;: &quot;ONBOARD VGA DISPLAY GARBAGE&quot;},{ &quot;id&quot;: &quot;214a321b-c543-42b8-baba-bd65e035bd19&quot;, &quot;text&quot;: &quot;MAINBOARD SYSTEM BURNT&quot;},{ &quot;id&quot;: &quot;bef0ca53-f897-47db-9ca0-d4aee472f8d2&quot;, &quot;text&quot;: &quot;MAINBOARD COSMETIC DAMAGE&quot;},{ &quot;id&quot;: &quot;2d6ac17f-ee4c-4cbf-a53d-db35add60a10&quot;, &quot;text&quot;: &quot;MAINBOARD SYSTEM HANG UP&quot;},{ &quot;id&quot;: &quot;ef15d3fe-7d22-440f-ba7a-e07b39087180&quot;, &quot;text&quot;: &quot;NO POWER&quot;},{ &quot;id&quot;: &quot;9576cd02-534e-43f7-9aa6-e533fbfb5f5a&quot;, &quot;text&quot;: &quot;M/B CAPACITANCE EXPLODES&quot;} ]},{ &quot;id&quot;: &quot;f8109b06-d85b-40c4-93b2-a346a69418a9&quot;, &quot;text&quot;: &quot;Power Manager&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;94e4c2b2-4bd8-45c4-8798-15a6cf13c3df&quot;, &quot;text&quot;: &quot;VU32&quot;},{ &quot;id&quot;: &quot;b64eb733-3641-49e6-a5a7-60c5a8663366&quot;, &quot;text&quot;: &quot;VB64&quot;},{ &quot;id&quot;: &quot;cb02ebdc-db0e-4e97-9860-612ef26ad968&quot;, &quot;text&quot;: &quot;VU64&quot;},{ &quot;id&quot;: &quot;602ec4a9-638d-4f8d-8ef6-bf2a181b8653&quot;, &quot;text&quot;: &quot;Battery Alert&quot;},{ &quot;id&quot;: &quot;a55d2a28-5171-4f59-81f3-bfdec99aa507&quot;, &quot;text&quot;: &quot;VHP32&quot;},{ &quot;id&quot;: &quot;b24fe335-16cc-439f-962c-e983d1c05363&quot;, &quot;text&quot;: &quot;VB32&quot;},{ &quot;id&quot;: &quot;ba2791c1-64d1-4ff7-b4f4-f916c632cd8b&quot;, &quot;text&quot;: &quot;VHP64&quot;} ]},{ &quot;id&quot;: &quot;c007b43d-1f17-4772-bbec-ba36df70dfb8&quot;, &quot;text&quot;: &quot;SOFTWARE/ CUSTOMER BEHAVIOR&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;f24762b3-5eab-4536-9abe-0c81b7faa185&quot;, &quot;text&quot;: &quot;ACTIVESYNC FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;21104e64-b263-4d8e-897b-0fc417659753&quot;, &quot;text&quot;: &quot;INQUIRY DRIVER INSTALL PROCEDURE&quot;},{ &quot;id&quot;: &quot;0cab7500-9c71-4b87-886b-1055f21e9494&quot;, &quot;text&quot;: &quot;BIOS PASSWORD LOCKED&quot;},{ &quot;id&quot;: &quot;c98fa79c-0ecd-41a3-be5d-161cc5b950d3&quot;, &quot;text&quot;: &quot;INQUIRY WINDOWS 7 UPGRADE&quot;},{ &quot;id&quot;: &quot;0ec779b8-bd02-4603-97d6-22db711572ef&quot;, &quot;text&quot;: &quot;THIRD PARTY SOFTWARE ISSUE&quot;},{ &quot;id&quot;: &quot;151533a7-7621-4bb4-9956-34975350ae31&quot;, &quot;text&quot;: &quot;FAIL TO UPDATE DEVICE DRIVER&quot;},{ &quot;id&quot;: &quot;bdf1f8d0-4905-4862-b2b1-3f6fb4fb87c3&quot;, &quot;text&quot;: &quot;PASSWORD FORGOTTEN&quot;},{ &quot;id&quot;: &quot;a04ba9d8-a9c8-489e-b615-48dc48e032a2&quot;, &quot;text&quot;: &quot;EMPOWERING FUNCTION NOT WORKING&quot;},{ &quot;id&quot;: &quot;65eaabd6-fadd-43b4-9e88-5781ea22d9e8&quot;, &quot;text&quot;: &quot;FAIL TO SETUP OS&quot;},{ &quot;id&quot;: &quot;246c08e2-d94f-4af6-b9c1-6aeae20a56b5&quot;, &quot;text&quot;: &quot;SYSTEM GETS VIRUS&quot;},{ &quot;id&quot;: &quot;106f2edc-6ee6-4c1a-a4f5-74f1f74a5e3a&quot;, &quot;text&quot;: &quot;CD MEDIA BROKEN&quot;},{ &quot;id&quot;: &quot;0bd793e3-e40a-4d14-92e4-7f6ed64f25e0&quot;, &quot;text&quot;: &quot;INQUIRY PRODUCT SPEC&quot;},{ &quot;id&quot;: &quot;c03a0326-2884-4eb8-9eb6-8862285ca1f3&quot;, &quot;text&quot;: &quot;FAIL TO UPDATE DEVICE F/W&quot;},{ &quot;id&quot;: &quot;623c7e92-fa26-4d5f-9ea7-9a582d7cccd6&quot;, &quot;text&quot;: &quot;INQUIRY RECOVERY PROCEDURE&quot;},{ &quot;id&quot;: &quot;ab3b0366-0110-43be-8b19-c1a67bfe4137&quot;, &quot;text&quot;: &quot;CUSTOMER ASKS CD-MEDIA&quot;},{ &quot;id&quot;: &quot;15d8118e-8649-4477-a1ca-c682f50070ec&quot;, &quot;text&quot;: &quot;KB LIQUID POLLUTION&quot;},{ &quot;id&quot;: &quot;c08e1139-f910-4a6d-a623-c7b0c93a5b22&quot;, &quot;text&quot;: &quot;CUST. MISSING RCVD MEDIA&quot;},{ &quot;id&quot;: &quot;7c286828-d4ca-4c36-b000-caddd0a7eaab&quot;, &quot;text&quot;: &quot;SYSTEM LIQUID POLLUTION&quot;},{ &quot;id&quot;: &quot;8ad75fd0-8913-440c-a277-d04a8a890bac&quot;, &quot;text&quot;: &quot;FAIL TO UPDATE AP&quot;},{ &quot;id&quot;: &quot;a3712fc7-4209-409a-b6d6-d3e0450c10c1&quot;, &quot;text&quot;: &quot;OS VERSION ERROR&quot;},{ &quot;id&quot;: &quot;3534c031-d111-4fe3-8b97-f28f02d06242&quot;, &quot;text&quot;: &quot;CUSTOMER ASKS UPGRADE&quot;},{ &quot;id&quot;: &quot;c591c46b-d326-4e13-b49f-ff40d57de9ac&quot;, &quot;text&quot;: &quot;CUST. MISSING CD MEDIA&quot;} ]},{ &quot;id&quot;: &quot;e90aaf29-2c6b-465b-ac93-c7d009adb71f&quot;, &quot;text&quot;: &quot;Applications 3rd party&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;561a05aa-3cb3-48e1-80fa-d4d2c25f2435&quot;, &quot;text&quot;: &quot;Multimedia Software (players, recorders, display, editors)&quot;} ]},{ &quot;id&quot;: &quot;cd12b346-49d7-44ba-8178-d698ad55db2c&quot;, &quot;text&quot;: &quot;BATTERY AND POWER SUPPLY&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;4d6f8535-8973-476b-8b44-082ff8e9f0f0&quot;, &quot;text&quot;: &quot;ADAPTER DEAD&quot;} ]},{ &quot;id&quot;: &quot;f0aa8da8-2e24-41d2-b21d-e60627829ca4&quot;, &quot;text&quot;: &quot;EMPOWERING AP&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;a02e4358-db8c-4dd2-adfc-01e7d3d9f0a5&quot;, &quot;text&quot;: &quot;E-OPENING&quot;},{ &quot;id&quot;: &quot;6af0f9a7-883f-4370-b35f-03a388fefa5a&quot;, &quot;text&quot;: &quot;E-RECOVERY CAN NOT CREATE CD/DVD&quot;},{ &quot;id&quot;: &quot;289ff585-9f44-485f-ba48-101c43b4628f&quot;, &quot;text&quot;: &quot;eSETTINGS MANAGEMENT&quot;},{ &quot;id&quot;: &quot;c295f312-9a0c-4890-8339-1ca1262a474b&quot;, &quot;text&quot;: &quot;E-COLOR&quot;},{ &quot;id&quot;: &quot;eb38cd57-28e4-4881-b626-2d473fba2be6&quot;, &quot;text&quot;: &quot;E-PERFORMANCE&quot;},{ &quot;id&quot;: &quot;d144b349-bb0b-45c3-bddb-3c64d6587110&quot;, &quot;text&quot;: &quot;ORBICAM&quot;},{ &quot;id&quot;: &quot;aaf804eb-af1d-49ea-9611-53b6b54926a1&quot;, &quot;text&quot;: &quot;E-MODE&quot;},{ &quot;id&quot;: &quot;7b51c51a-d3f6-4f77-a004-5a1222497442&quot;, &quot;text&quot;: &quot;GRID VISTA&quot;},{ &quot;id&quot;: &quot;4f723f63-3ea0-4e59-866f-61f47f4ade38&quot;, &quot;text&quot;: &quot;E-DATA SECURITY&quot;},{ &quot;id&quot;: &quot;8be28313-c4b2-4d93-9e7e-826ff44c359a&quot;, &quot;text&quot;: &quot;E-LOCK&quot;},{ &quot;id&quot;: &quot;ed4946b5-9b5a-4efb-876c-8310c0ec86ba&quot;, &quot;text&quot;: &quot;E-RECOVERY CAN NOT ACCEPT THE PASSWORD&quot;},{ &quot;id&quot;: &quot;cffadaac-9de6-4dc9-b795-9eac0b640dea&quot;, &quot;text&quot;: &quot;ESETTINGS DOES NOT ACCEPT THE PASSWORD&quot;},{ &quot;id&quot;: &quot;1ab5f1d4-f674-4dbb-99fc-a074cd9587e8&quot;, &quot;text&quot;: &quot;E-RECOVERY CD/DVD BURNED FAILURE&quot;},{ &quot;id&quot;: &quot;ece7fef3-45d6-40ce-a42f-a9275106ff87&quot;, &quot;text&quot;: &quot;E-CHANNEL&quot;},{ &quot;id&quot;: &quot;cbf4ded0-73b7-480a-bd38-ae2aa9960e91&quot;, &quot;text&quot;: &quot;E-RECOVERY&quot;},{ &quot;id&quot;: &quot;13a259de-7119-437a-af77-cb0d9e4155ab&quot;, &quot;text&quot;: &quot;E-TIMER&quot;},{ &quot;id&quot;: &quot;6022d2b2-f6cb-4cdd-b9cb-ed98c06f7413&quot;, &quot;text&quot;: &quot;E-RECOVERY DOES NOT BOOT ALT+F10&quot;},{ &quot;id&quot;: &quot;11d481df-2d03-4e82-9918-fa1b9476596c&quot;, &quot;text&quot;: &quot;E-DISPLAY&quot;},{ &quot;id&quot;: &quot;f1ec68ee-5fcd-4d8f-8254-ffb4e55c20ee&quot;, &quot;text&quot;: &quot;E-VIEW&quot;} ]},{ &quot;id&quot;: &quot;78908173-ce37-4651-92ef-f5e1d16185d1&quot;, &quot;text&quot;: &quot;INPUT DEVICE&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;9079833c-d3ee-461d-8a0c-0bf3f27887d7&quot;, &quot;text&quot;: &quot;KB NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;18902fb8-e2c9-4a86-8371-18b23fca194c&quot;, &quot;text&quot;: &quot;POINTING DEVICE FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;17821b56-56b7-4b2f-8e01-2f2155e63c0d&quot;, &quot;text&quot;: &quot;KEYCAP BROKEN&quot;},{ &quot;id&quot;: &quot;60d8e27b-fed6-4531-8072-417dca66b7b2&quot;, &quot;text&quot;: &quot;CINE-DASH MEDIA CONSOLE&quot;},{ &quot;id&quot;: &quot;db1a6df9-3c4b-438b-86d1-44dcbcdf5d5e&quot;, &quot;text&quot;: &quot;KB FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;d788baf8-fd3f-4188-a64a-70f907f6f393&quot;, &quot;text&quot;: &quot;POINTING DEVICE NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;45813b05-8aa0-42f8-bc71-7c4a044aff11&quot;, &quot;text&quot;: &quot;KEY PRINTING FADDING&quot;},{ &quot;id&quot;: &quot;bcf267e7-8535-479a-8940-9a6a7fca1a95&quot;, &quot;text&quot;: &quot;KB DEAD&quot;},{ &quot;id&quot;: &quot;9fb9567d-02d2-468d-8729-ae1d77e366b6&quot;, &quot;text&quot;: &quot;POINTING DEVICE NOT SENSITIVE&quot;},{ &quot;id&quot;: &quot;2edababd-f0bf-4c45-9a0c-ae5e67ca441a&quot;, &quot;text&quot;: &quot;KB STUCK KEY&quot;},{ &quot;id&quot;: &quot;4cae5739-c297-4432-a2ce-b1610f4f7ba0&quot;, &quot;text&quot;: &quot;WIRELESS MOUSE/KB CANT CONNECT TO SYSTEM&quot;},{ &quot;id&quot;: &quot;7907224e-f0f6-4831-b122-bf5409c39ea0&quot;, &quot;text&quot;: &quot;KEYCAP MISSING&quot;} ]},{ &quot;id&quot;: &quot;e0760348-f945-4925-9c18-fa73412439c3&quot;, &quot;text&quot;: &quot;EXTERNAL &amp; SYNC. FUNCTION &amp; PORT&quot;, &quot;children&quot;: [{ &quot;id&quot;: &quot;049b787b-dab6-4785-87f7-0dbbe2699d2a&quot;, &quot;text&quot;: &quot;PC CARD FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;b9962a8f-2317-4412-b979-1320c27e0e2e&quot;, &quot;text&quot;: &quot;PC CARD NOT RECOGNIZED&quot;},{ &quot;id&quot;: &quot;27ef39c2-d144-4e03-8253-135b9dbf3078&quot;, &quot;text&quot;: &quot;PARALLEL PORT FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;5f6a872c-04c2-4545-9387-235aba74d1d0&quot;, &quot;text&quot;: &quot;RS232 SYNC. ERROR&quot;},{ &quot;id&quot;: &quot;0781ea68-02c0-4d73-905d-367992bf2191&quot;, &quot;text&quot;: &quot;VIDEO NOT SYNC (PICTURE CHANGE BUT OLD PICTURE STILL HAS SHADOW)&quot;},{ &quot;id&quot;: &quot;4beea9f5-d386-4c7d-bc7e-4caca9fb2b16&quot;, &quot;text&quot;: &quot;HDMI Failure&quot;},{ &quot;id&quot;: &quot;17deeeef-f4d0-40a9-9c2a-5bd306dced28&quot;, &quot;text&quot;: &quot;FIR FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;a22df84d-1439-4cfd-afe5-5d415ef553bb&quot;, &quot;text&quot;: &quot;GAME PORT FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;1fb9a23a-28ac-42d8-ac64-6af078edbd83&quot;, &quot;text&quot;: &quot;PCI EXPRESS FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;6f845af9-782a-4a43-b4e2-8010adcb66ba&quot;, &quot;text&quot;: &quot;PS2 PORT FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;29827772-a999-4667-97d3-8f7b1bf36241&quot;, &quot;text&quot;: &quot;1394 FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;cad54bec-3919-4c3a-8db7-a5f762ef007c&quot;, &quot;text&quot;: &quot;ABNORMAL OUTPUT SIGNAL&quot;},{ &quot;id&quot;: &quot;58d091e4-1822-4af0-8a39-ae71fb57b18b&quot;, &quot;text&quot;: &quot;REMOTE CONTROL FUNCTION FAIL&quot;},{ &quot;id&quot;: &quot;3326ae09-d923-4470-8c07-b914fcf5a9db&quot;, &quot;text&quot;: &quot;USB FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;ba3aea7b-bc0b-432f-b54e-da11439fd088&quot;, &quot;text&quot;: &quot;S-Video Failure&quot;},{ &quot;id&quot;: &quot;0d2295cf-9f9f-4e88-bb4b-e606d637c622&quot;, &quot;text&quot;: &quot;DVI Failure&quot;},{ &quot;id&quot;: &quot;31bf0ab1-c8f1-40fb-9860-f6e2c605c245&quot;, &quot;text&quot;: &quot;SERIAL PORT FUNCTION FAILURE&quot;},{ &quot;id&quot;: &quot;01db7727-07b9-408b-920c-fa97ac8f8a43&quot;, &quot;text&quot;: &quot;IR SYNC. ERROR&quot;} ]} ]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:RecallsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:RecallsHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:cityHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:cityHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerInfoHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerInfoHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ShipToAddressHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ShipToAddressHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:GenerateSNoCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:GenerateSNoCheck</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtEmailCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtEmailCheck</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:cmdUpdate1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:cmdUpdate1</stringProp>
                  <stringProp name="Argument.value">Save and Exit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboWarrantyClassification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboWarrantyClassification</stringProp>
                  <stringProp name="Argument.value">RTOOW</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressvalidationReqHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressvalidationReqHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AHDResourceIDhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AHDResourceIDhidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:VerificationNotesforSave" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:VerificationNotesforSave</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ReasonsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ReasonsHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:cboCountryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:cboCountryHidden</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToCityTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToCityTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OOWCaseStatusHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OOWCaseStatusHidden</stringProp>
                  <stringProp name="Argument.value">S1,S3,S7,S6N,S10,S10N,S15,S18,S2,S6,S7N,S8,S8N,S9,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ProvinceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ProvinceHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FOSCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FOSCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AppoinmentDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AppoinmentDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PurchaseDateChangedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PurchaseDateChangedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressVerificationHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressVerificationHiddenField</stringProp>
                  <stringProp name="Argument.value">-1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboProductLine" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboProductLine</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShowMoreInfoTab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShowMoreInfoTab</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:HDADBNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:HDADBNameHidden</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IdsiteHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IdsiteHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ConfiguredCaseType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ConfiguredCaseType</stringProp>
                  <stringProp name="Argument.value">,1,T14S,T25N,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ASPTextHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ASPTextHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:CountyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:CountyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShipToAddHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShipToAddHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:Survey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:Survey</stringProp>
                  <stringProp name="Argument.value">CustomerServeyno</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:PickupCarrierSelectedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:PickupCarrierSelectedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressValidatorResultHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressValidatorResultHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:CountryField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:CountryField</stringProp>
                  <stringProp name="Argument.value">Germany [49]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:faxHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:faxHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactIDhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactIDhidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorResultEditModeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorResultEditModeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ASPHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ASPHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DeletedFailureCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DeletedFailureCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MinMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MinMobileNo</stringProp>
                  <stringProp name="Argument.value">9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:CheckCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:CheckCountry</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:OldPartNumberHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:OldPartNumberHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:Custinfochanged" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:Custinfochanged</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ProblemTextHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ProblemTextHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FastSystemURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FastSystemURLHidden</stringProp>
                  <stringProp name="Argument.value">http://whatsin-uat.acer.com.tw/Internal/pages/WhatsInLink.aspx?</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ISTransferredHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ISTransferredHidden</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressvalidationReqHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressvalidationReqHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ISCaseTypeChangeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ISCaseTypeChangeHidden</stringProp>
                  <stringProp name="Argument.value">YES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerSourceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerSourceHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToZipCodeTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToZipCodeTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AddressVerificationStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AddressVerificationStatus</stringProp>
                  <stringProp name="Argument.value">-1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ContactIsSendEmailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ContactIsSendEmailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseAssignToHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseAssignToHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OldPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OldPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPRODLINE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPRODLINE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PartNumberHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PartNumberHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:MaxMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:MaxMobileNo</stringProp>
                  <stringProp name="Argument.value">14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:initialformdata" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:initialformdata</stringProp>
                  <stringProp name="Argument.value">{&quot;IDTicket&quot;:&quot;0&quot;,&quot;Price&quot;:0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboRepairCenter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboRepairCenter</stringProp>
                  <stringProp name="Argument.value">83405F80-2D3A-4697-9A74-B4AAF5F7F6F9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressInfoChangedHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressInfoChangedHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SpareWarrantyExpHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SpareWarrantyExpHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ProdLineDefTicketTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ProdLineDefTicketTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ShipmentCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ShipmentCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value">T25N,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucMoreInfo:formName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucMoreInfo:formName</stringProp>
                  <stringProp name="Argument.value">CaseCreationMoreInfo</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:HDADBName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:HDADBName</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerRefFlag" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerRefFlag</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressValidatorHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressValidatorHidden</stringProp>
                  <stringProp name="Argument.value">ADDRESSVALIDATION</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SNAvailableHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SNAvailableHidden</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressValidatorHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressValidatorHidden</stringProp>
                  <stringProp name="Argument.value">ADDRESSVALIDATION</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PreviousPurchaseDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PreviousPurchaseDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ZipcodeurlHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ZipcodeurlHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipmentAddressIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipmentAddressIDHidden</stringProp>
                  <stringProp name="Argument.value">bb8b01e3-cb63-4736-baac-5605211628e8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RecallsHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RecallsHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendProductlines" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendProductlines</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DefaultCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DefaultCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:TicketTypeChangedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:TicketTypeChangedHidden</stringProp>
                  <stringProp name="Argument.value">TRUE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PNHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PNHidden</stringProp>
                  <stringProp name="Argument.value">[object Object]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:h_Destination" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:h_Destination</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:NewPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:NewPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ShippingCarrierHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ShippingCarrierHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ResourceChangeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ResourceChangeHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipmentAddressTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipmentAddressTextBox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressPOBOXDataHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressPOBOXDataHidden</stringProp>
                  <stringProp name="Argument.value">POB,APO,FPO,POST OFFICE BOX,POBOX,PO BOX,P.O. BOX,P.O.BOX</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:PHASEOUTDATEHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:PHASEOUTDATEHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtPN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtPN</stringProp>
                  <stringProp name="Argument.value">[object Object]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ProductLineChangedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ProductLineChangedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:OnsiteHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:OnsiteHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SpareOnlyWarrantyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SpareOnlyWarrantyHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:txtCity" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:txtCity</stringProp>
                  <stringProp name="Argument.value">Kassel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="AHDRepairCenterHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">AHDRepairCenterHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ResourceField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ResourceField</stringProp>
                  <stringProp name="Argument.value">Szopinska Paulina</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerIDHidden</stringProp>
                  <stringProp name="Argument.value">C1244DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:DateFormatHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:DateFormatHidden</stringProp>
                  <stringProp name="Argument.value">MM/dd/yyyy</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressValidatorWebAPIURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressValidatorWebAPIURLHidden</stringProp>
                  <stringProp name="Argument.value">http://sertec360-uat.emea.intra.acer.com/AddressValidator/api/AddressValidator/ValidateAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISAFSExistHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISAFSExistHidden</stringProp>
                  <stringProp name="Argument.value">YES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">AF7653EC</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FastSystemuname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FastSystemuname</stringProp>
                  <stringProp name="Argument.value">uHKBfUfZ1yx95NyC3CusyPUY1g9w1Y/9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:txtEmail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:txtEmail</stringProp>
                  <stringProp name="Argument.value">scrambledby@apm.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ProductionDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ProductionDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ClosedCaseHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ClosedCaseHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToCountryTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToCountryTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeListBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeListBox</stringProp>
                  <stringProp name="Argument.value">77540958-1d3a-4420-8cfa-28eb318b4c3b</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressVerificationCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressVerificationCheck</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:h_IDCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:h_IDCountry</stringProp>
                  <stringProp name="Argument.value">DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISContactChangehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISContactChangehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDSWAPREQUEST" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDSWAPREQUEST</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:cboTicketStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:cboTicketStatus</stringProp>
                  <stringProp name="Argument.value">S1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressPOBOXValidationRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressPOBOXValidationRequired</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ParentIDSiteTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ParentIDSiteTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:txtAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:txtAddress</stringProp>
                  <stringProp name="Argument.value">tsnemlU42 eßar</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IDCustomerhidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IDCustomerhidden</stringProp>
                  <stringProp name="Argument.value">C1244DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPURDATECHANGE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPURDATECHANGE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PartModelHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PartModelHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyClassificationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyClassificationHidden</stringProp>
                  <stringProp name="Argument.value">Out of Warranty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:MinMobileNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:MinMobileNo</stringProp>
                  <stringProp name="Argument.value">9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:DealerTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:DealerTextBox</stringProp>
                  <stringProp name="Argument.value">Others - Germany</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ProductDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ProductDateHidden</stringProp>
                  <stringProp name="Argument.value">12:00:00 AM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:FastSystempwd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:FastSystempwd</stringProp>
                  <stringProp name="Argument.value">e+eLpQ78HoKOczNY7h60VA==</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ReasonCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ReasonCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value">,T19C,T20C,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SessionHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SessionHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:txtRegion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:txtRegion</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtAppointmentDateNew" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtAppointmentDateNew</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:HDADBHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:HDADBHidden</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:ShipToAddressValidatorNameHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:ShipToAddressValidatorNameHidden</stringProp>
                  <stringProp name="Argument.value">ADDRESSVALIDATION</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:AssetValidateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:AssetValidateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressValidatorWebAPIURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressValidatorWebAPIURLHidden</stringProp>
                  <stringProp name="Argument.value">http://sertec360-uat.emea.intra.acer.com/AddressValidator/api/AddressValidator/ValidateAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:txtID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:txtID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:txtID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:txtID</stringProp>
                  <stringProp name="Argument.value">C1244DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SNHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SNHidden</stringProp>
                  <stringProp name="Argument.value">${SNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:IDCustomerSubTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:IDCustomerSubTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:RepairCaseStatusHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:RepairCaseStatusHidden</stringProp>
                  <stringProp name="Argument.value">S1,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:AddressVerifyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:AddressVerifyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtIMEI1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtIMEI1</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:EditCaseWarrantyClassificationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:EditCaseWarrantyClassificationHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:Instr_CaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:Instr_CaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:txtIMEI2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:txtIMEI2</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:cboAvailabilityTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:cboAvailabilityTo</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDNOPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDNOPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:EmailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:EmailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:StateDropdownvaluehidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:StateDropdownvaluehidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShipmentAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShipmentAddress</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:CaseTypeFilterHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:CaseTypeFilterHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:FaxTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:FaxTextBox</stringProp>
                  <stringProp name="Argument.value">111111</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignedResourceHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignedResourceHidden</stringProp>
                  <stringProp name="Argument.value">P1209Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:EMailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:EMailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:CustomerMailHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:CustomerMailHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPRODLINECHANGE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPRODLINECHANGE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:AssignToCustomerTextbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:AssignToCustomerTextbox</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RefNumberTextBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RefNumberTextBox</stringProp>
                  <stringProp name="Argument.value">34534534</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:txtZipCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:txtZipCode</stringProp>
                  <stringProp name="Argument.value">34117</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:LocationIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:LocationIDHidden</stringProp>
                  <stringProp name="Argument.value">83405f80-2d3a-4697-9a74-b4aaf5f7f6f9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:CurrentDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:CurrentDateHidden</stringProp>
                  <stringProp name="Argument.value">6/4/2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RequestCreatedDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RequestCreatedDateHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:FedEXHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:FedEXHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:ValidatePhaseOutDateHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:ValidatePhaseOutDateHidden</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:AddressValidatorWebAPIURLHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:AddressValidatorWebAPIURLHidden</stringProp>
                  <stringProp name="Argument.value">http://sertec360-uat.emea.intra.acer.com/AddressValidator/api/AddressValidator/ValidateAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:WarrExpiryHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:WarrExpiryHidden</stringProp>
                  <stringProp name="Argument.value">1/1/0001 12:00:00 AM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ShipToAddressvalidationReqHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ShipToAddressvalidationReqHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendReasonHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendReasonHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CopySymptomtoProblem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CopySymptomtoProblem</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:TicketClosedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:TicketClosedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:GSNAssetSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:GSNAssetSource</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:SalesOrginCountryDownList" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:SalesOrginCountryDownList</stringProp>
                  <stringProp name="Argument.value">AFG</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:AllowOOWCaseCreationHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:AllowOOWCaseCreationHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:DefaultShippingFreightID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:DefaultShippingFreightID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ShipmentCarrierSelectedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ShipmentCarrierSelectedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:WarrantyExp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:WarrantyExp</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:RepairTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:RepairTypeHidden</stringProp>
                  <stringProp name="Argument.value">RTOOW</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ResourceHiddenValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ResourceHiddenValue</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:DealerIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:DealerIDHidden</stringProp>
                  <stringProp name="Argument.value">10054</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:BillToAddressValidatorResultHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:BillToAddressValidatorResultHidden</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCase:ReasonCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCase:ReasonCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ISActiveHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ISActiveHidden</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AgentLocaleHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AgentLocaleHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucProduct:OnSiteWarrantyExpHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucProduct:OnSiteWarrantyExpHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:txtContactName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:txtContactName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AutoAssignIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AutoAssignIDHidden</stringProp>
                  <stringProp name="Argument.value">P1209Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AgentRoleHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AgentRoleHidden</stringProp>
                  <stringProp name="Argument.value">SenCCR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ucCustomer:ucAddress:MobileCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ucCustomer:ucAddress:MobileCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/PageProxy.aspx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://sertec360-uat.emea.intra.acer.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">512</stringProp>
            </ConstantTimer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ViewState4</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; id=&quot;__VIEWSTATE&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">ViewState4Notfound</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetSNLength" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetSNLength</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetSNLength" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetSNLength</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ConfirmCase" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/(S(blmd520rmxq4mvos3uxixiz0))/PageProxy.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">AF7653EC</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CaseModeHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CaseModeHiddenField</stringProp>
                  <stringProp name="Argument.value">Normal</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PurchaseDateChangedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PurchaseDateChangedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value">${ViewState4}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:MobileCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:MobileCodeHidden</stringProp>
                  <stringProp name="Argument.value">65,91</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ClosedCaseHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ClosedCaseHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:RetainProductHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:RetainProductHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShowMoreInfoTab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShowMoreInfoTab</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:cmdUpdateConfirm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:cmdUpdateConfirm</stringProp>
                  <stringProp name="Argument.value">Confirm</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ConfiguredCaseType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ConfiguredCaseType</stringProp>
                  <stringProp name="Argument.value">,1,T14S,T25N,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDINCORRECTSN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDINCORRECTSN</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtCustomerName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtCustomerName</stringProp>
                  <stringProp name="Argument.value">,ezölKhplaR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShipToAddHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShipToAddHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:IsClosecaseHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:IsClosecaseHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtIDTicket" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtIDTicket</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDSWAPREQUEST" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDSWAPREQUEST</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:WarrantyHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:WarrantyHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtPriority" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtPriority</stringProp>
                  <stringProp name="Argument.value">4BD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeSelectedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeSelectedHidden</stringProp>
                  <stringProp name="Argument.value">,77540958-1d3a-4420-8cfa-28eb318b4c3b,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OOWProductLineHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OOWProductLineHidden</stringProp>
                  <stringProp name="Argument.value">C22S,C33G,C24S,C21S,C36S,C38S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DeletedFailureCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DeletedFailureCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ManualTextHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ManualTextHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPURDATECHANGE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPURDATECHANGE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PartModelHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PartModelHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:selected_tab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:selected_tab</stringProp>
                  <stringProp name="Argument.value">#Case</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtType</stringProp>
                  <stringProp name="Argument.value">HW-RMA 2-WAY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DefCodeHiddenValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DefCodeHiddenValue</stringProp>
                  <stringProp name="Argument.value">|77540958-1d3a-4420-8cfa-28eb318b4c3b</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ISTransferredHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ISTransferredHidden</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtSolution" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtSolution</stringProp>
                  <stringProp name="Argument.value">asdasd</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SessionHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SessionHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtRepairCenter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtRepairCenter</stringProp>
                  <stringProp name="Argument.value">Acer DE - Ahrensburg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:HDADBHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:HDADBHidden</stringProp>
                  <stringProp name="Argument.value">ACGCSS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OldPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OldPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPRODLINE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPRODLINE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PartNumberHiddenField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PartNumberHiddenField</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtProductName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtProductName</stringProp>
                  <stringProp name="Argument.value">PCI BOARD 4037AL RS232 MULTIPO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SNHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SNHidden</stringProp>
                  <stringProp name="Argument.value">${SNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:RepairCaseStatusHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:RepairCaseStatusHidden</stringProp>
                  <stringProp name="Argument.value">S1,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formOptions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formOptions</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SearchTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SearchTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ProdLineDefTicketTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ProdLineDefTicketTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDNOPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDNOPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:DateFormatHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:DateFormatHidden</stringProp>
                  <stringProp name="Argument.value">MM/dd/yyyy</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerRefFlag" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerRefFlag</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ShipmentAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ShipmentAddress</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FailureCodeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FailureCodeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPRODLINECHANGE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPRODLINECHANGE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtProblem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtProblem</stringProp>
                  <stringProp name="Argument.value">System Failure: Ubuntu |   Manual Failure: NA   </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:ENABLESUSPENDPOPCHANGED" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:ENABLESUSPENDPOPCHANGED</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendProductlines" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendProductlines</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendReasonHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendReasonHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CopySymptomtoProblem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CopySymptomtoProblem</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:TicketClosedHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:TicketClosedHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerInfoHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerInfoHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtCustomerID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtCustomerID</stringProp>
                  <stringProp name="Argument.value">C1244DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:PNHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:PNHidden</stringProp>
                  <stringProp name="Argument.value">[object Object]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:NewPOP" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:NewPOP</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formdata" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formdata</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtStatus</stringProp>
                  <stringProp name="Argument.value">Open</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtAssignedTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtAssignedTo</stringProp>
                  <stringProp name="Argument.value">Szopinska Paulina</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:formSchema" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:formSchema</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:SuspendPermissionHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:SuspendPermissionHidden</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="HiddenElements" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">HiddenElements</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AgentLocaleHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AgentLocaleHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AutoAssignIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AutoAssignIDHidden</stringProp>
                  <stringProp name="Argument.value">P1209Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:AgentRoleHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:AgentRoleHidden</stringProp>
                  <stringProp name="Argument.value">SenCCR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:OOWCaseStatusHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:OOWCaseStatusHidden</stringProp>
                  <stringProp name="Argument.value">S1,S3,S7,S6N,S10,S10N,S15,S18,S2,S6,S7N,S8,S8N,S9,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:txtSerialNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:txtSerialNumber</stringProp>
                  <stringProp name="Argument.value">${SNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:CustomerIDHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:CustomerIDHidden</stringProp>
                  <stringProp name="Argument.value">C1244DE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="SR_CASE:FOSCaseTypeHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SR_CASE:FOSCaseTypeHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/${SessionID}/PageProxy.aspx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://sertec360-uat.emea.intra.acer.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CaseID</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;div id=&quot;SR_CASE_SuccessDiv&quot; class=&quot;alert alert-success collapse&quot;&gt;New Case created with ID (.*?)&lt;/div&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CaseIDNotCreated</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">TicketID = vars.get(&quot;CaseID&quot;);
FileWriter fstream = new FileWriter(&quot;D:\JmeterBlazeScripts\CSV\CaseIDCSV.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(TicketID + &quot;,&quot; );
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetSNLength" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetSNLength</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DE/Services/Ajax.asmx/GetSNLength" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DE/Services/Ajax.asmx/GetSNLength</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DECSSServices/Tags/All" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DECSSServices/Tags/All</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="http://sertec360-uat.emea.intra.acer.com/DECSSServices/Tags/Item/CASE/13845DE" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">DECSSServices/Tags/Item/CASE/13845DE</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
